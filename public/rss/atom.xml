<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiangwenyang.com</id>
    <title>Jiang Wenyang's Blog</title>
    <updated>2022-04-22T09:26:49.976Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Jiang Wenyang</name>
        <email>u19950930@gmail.com</email>
        <uri>https://jiangwenyang.com</uri>
    </author>
    <link rel="alternate" href="https://jiangwenyang.com"/>
    <link rel="self" href="https://jiangwenyang.com/atom"/>
    <subtitle>Jiang Wenyang's Blog</subtitle>
    <logo>https://jiangwenyang.com/logo.svg</logo>
    <icon>https://jiangwenyang.com/favicon.ico</icon>
    <rights>All rights reserved 2022, Jiang Wenyang</rights>
    <entry>
        <title type="html"><![CDATA[一个真实的Vue CLI项目迁移到vite]]></title>
        <id>https://jiangwenyang.com/posts/一个真实的vue-cli项目迁移到vite</id>
        <link href="https://jiangwenyang.com/posts/一个真实的vue-cli项目迁移到vite"/>
        <updated>2021-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[需要迁移到Vite的理由，并以真实项目为例，详细介绍从vue-cli迁移到Vite的可能会遇到的问题，以及如何解决这些问题]]></summary>
        <content type="html"><![CDATA[<h2>是谁？叫什么？来自哪里？要去往那里？</h2>
<p>先来回答灵魂拷问。我们原有的项目是一个使用 Vue CLI 生成的 vue2 项目，项目整体上是没有什么大问题的，但是随着模块的不断增多，Vue CLI 基于 Webpack 构建速度越来越慢，开发体验上比较差，为了减少抓狂时间，我们将目光转向了号称很快的 Vite。</p>
<p>废话不多说，先来看原本的项目结构：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">├── .browserslistrc
├── .editorconfig
├── .env.development // 环境变量，以下几个文件同
├── .env.development.local
├── .env.pre
├── .env.production
├── .env.si
├── .env.test
├── .eslintignore
├── .eslintrc.js
├── .gitignore
├── .npmrc
├── .nvmrc
├── .prettierignore
├── .prettierrc.js
├── .stylelintignore
├── .stylelintrc.js
├── README.md
├── babel.config.js
├── build/
├── config/ 一些项目配置文件，如代理配置等
├── dist/ 构建产物
├── doc/ 开发文档
├── jsconfig.json
├── mock/
├── package.json
├── postcss.config.js
├── public/
├── src/ 业务相关
├── tests/
├── vue.config.js // Vue CLI配置
└── yarn.lock</code></pre></div>
<h2>好好的为什么要迁移？</h2>
<p>迁移的目的主要是构建速度上的差别，除此之外 Vite 也有一些其他的优势。</p>
<ul>
<li>
<p>构建速度</p>
<p>Vite 相比 Vue CLI 最显著的优势应该就是构建速度了，Vite 基于 esbuild 预构建依赖，因此会快很多，开发体验会更好。</p>
<blockquote>
<p>Vite 的开发环境和生产环境构建目前有所区别，开发环境因为直接使用原生 ESM 不需要打包，而生产环境打包采用了 Rollup</p>
</blockquote>
</li>
<li>
<p>隐藏技术细节</p>
<p>呃，这一点，其实 vite 和 Vue CLI 没有太大区别。。。</p>
</li>
<li>
<p>折腾，尝试新的工具</p>
<p>毕竟是新的工具，尝试一下，并且 Vue 社区目前也是在推动的。</p>
</li>
</ul>
<h2>千里之行始于足下</h2>
<p>万事开头难，既然迁移的 Flag 已经立了，只能硬着头皮上了。让我们先简单看一遍 Vite 的官方文档，文档延续了 Vue 官方文档简洁清晰的优点，基本上简单看一遍就对 Vite 比较了解了，具体细节不比过分深究。看完文档很容易发现和 Vue CLI 的一些约定上的区别，对于这部分是必须修改代码的，下面开始迁移</p>
<h3>首先丢掉历史包袱，移除 Vue CLI 轻装上阵</h3>
<p>首先，我们先移除所有和 Vue CLI 相关的依赖以及配置</p>
<ul>
<li>
<p>在 <code>package.json</code> 的依赖中搜索 <code>vue-cli</code> 关键词，然后移除相关依赖。</p>
</li>
<li>
<p>将 script 中的启动脚本改为 Vite 对应的启动脚本</p>
<p>将原本的启动脚本</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve --open"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --mode development"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>改为</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span><span class="token punctuation">,</span>
    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
</ul>
<h3>然后剔个牙，做些“小改动”</h3>
<p>我们上面说到 Vite 和 Vue CLI 在部分约定上的不同，需要对代码做一些小改动</p>
<h4>入口不同</h4>
<p>Vue CLI 默认入口为<code>src/main.js</code>，而 Vite 的默认入口则是 index.html</p>
<p>直接引用官方文档：</p>
<blockquote>
<p>Vite 将 <code>index.html</code> 视为源码和模块图的一部分。Vite 解析 <code>&#x3C;script type="module" src="..."></code> ，这个标签指向你的 JavaScript 源码。甚至内联引入 JavaScript 的 <code>&#x3C;script type="module"></code> 和引用 CSS 的 <code>&#x3C;link href></code> 也能利用 Vite 特有的功能被解析。另外，<code>index.html</code> 中的 URL 将被自动转换，因此不再需要 <code>%PUBLIC_URL%</code> 占位符了。</p>
</blockquote>
<p>因此我们首先需要修改原有的入口</p>
<p>将 <code>public/index.html</code></p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span>
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#x3C;%= BASE_URL %>favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>&#x3C;%= webpackConfig.name %><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>noscript</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>本页面需要浏览器支持（启用）JavaScript！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>noscript</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&#x3C;!-- built files will be auto injected --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>移动到根目录下<code>index.html</code> ，并做修改</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span>
      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>noscript</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span>本页面需要浏览器支持（启用）JavaScript！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>noscript</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&#x3C;!-- Vite将自动解析下面的js文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span>
</code></pre></div>
<h4>环境变量不同</h4>
<p>Vue CLI 的环境变量和 Vite 的环境变量加载都是通过 <a href="https://github.com/motdotla/dotenv">dotenv</a> 来实现的，因此在文件命名约定上是一致的。但具有以下两点不同：</p>
<ul>
<li>
<p>暴露方式</p>
<ul>
<li>
<p>Vue CLI 中约定只有 <code>NODE_ENV</code>、<code>BASE_URL</code> 和以<code>VUE_APP_</code> 开头的变量被暴露出来。</p>
</li>
<li>
<p>Vite 中则约定可以访问 <code>MODE</code> （应用运行的模式 development|production） 、<code>BASE_URL</code> 、<code>PROD</code> （是否运行在生产环境）、<code>DEV</code> （是否运行在开发环境）以及以 <code>VITE_</code> 开头的环境变量。</p>
</li>
</ul>
</li>
<li>
<p>访问方式</p>
<ul>
<li>
<p>Vue CLI 通过<code>process.env</code> 来访问</p>
</li>
<li>
<p>Vite 通过 <code>import.meta.env</code> 来访问</p>
</li>
</ul>
</li>
</ul>
<p>由于以上的两点不同，迁移时我们就需要：</p>
<ul>
<li>将原本以 <code>VUE_APP_</code> 开头的环境变量统一替换为以 <code>VITE_</code> 开头；或者可通过修改配置文件 <code>vite.config.js</code> 的 <a href="https://cn.vitejs.dev/config/index.html#envprefix">envPrefix</a> 进行配置，直接配置为 <code>VUE_APP_</code> 则不需要对原有环境变量名称进行修改。(配置文件的创建下面将会提到)</li>
<li>将 <code>process.env</code> 统一替换为 <code>import.meta.env</code>。</li>
</ul>
<h4>不能忽略自定义导入类型扩展名（如<code>.vue</code>）</h4>
<p>在 Vue CLI 中，默认我们可以不写<code>.vue</code>扩展名进行导入</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">App</span></span> <span class="token keyword module">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>
</code></pre></div>
<p>但是在 Vite 中，<strong>不建议</strong>（实测还是可以配置的）忽略自定义扩展名，因为会影响 IDE 和类型支持。因此需要完整书写</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">App</span></span> <span class="token keyword module">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span>
</code></pre></div>
<blockquote>
<p>非自定义类型的扩展名可以通过配置项 <code> resolve.extensions</code> 来进行配置，默认为 <code>['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json']</code></p>
</blockquote>
<h3>出来吧你，Vite</h3>
<p>到目前为止，基本的修改以及完成，我们开始引入 Vite。</p>
<p>Vite 的安装比较简单，唯一需要注意的就是对于不同的 Vue 版本，需要用到不同的插件。</p>
<p>安装 Vite</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> -D
</code></pre></div>
<p>安装对应版本的 Vue 插件</p>
<blockquote>
<p>Vite 为 Vue 提供第一优先级支持：</p>
<ul>
<li>Vue 3 单文件组件支持：<a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue">@vitejs/plugin-vue</a></li>
<li>Vue 3 JSX 支持：<a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx">@vitejs/plugin-vue-jsx</a></li>
<li>Vue 2 支持：<a href="https://github.com/underfin/vite-plugin-vue2">underfin/vite-plugin-vue2</a></li>
</ul>
</blockquote>
<p>由于我们使用 Vue2，因此安装 <code>vite-plugin-vue2</code></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> -D vite-plugin-vue2
</code></pre></div>
<p>在根目录创建配置文件 <code>vite.config.js</code></p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json">import <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> from 'vite'
const <span class="token punctuation">{</span> createVuePlugin <span class="token punctuation">}</span> = require('vite-plugin-vue2')

<span class="token comment">// https://vitejs.dev/config/</span>
export default defineConfig(() => <span class="token punctuation">{</span>
  return <span class="token punctuation">{</span>
    base<span class="token operator">:</span> './'<span class="token punctuation">,</span>
    clearScreen<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>createVuePlugin()<span class="token punctuation">]</span><span class="token punctuation">,</span>
    build<span class="token operator">:</span> <span class="token punctuation">{</span>
      target<span class="token operator">:</span> 'es2015'<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>)
</code></pre></div>
<p><strong>完结撒花！！！</strong></p>
<p>如果你的项目没有其他特殊的需求的话，到目前为止，你基本上应该可以跑起来了。不过，我们的项目就没这么幸运了，旅途才刚刚开始。。。</p>
<h2>填坑之旅</h2>
<h3>启用 JSX</h3>
<p>Vite 默认是不启用 JSX 的，如果要开启 JSX 支持还是比较麻烦的，需要：</p>
<ol>
<li>
<p>实例化 Vue2 插件的时候传入<code>{jsx: true}</code> 开启 JSX 支持。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createVuePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 引入Vue2插件并开启JSX支持</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>在用到的组件上加上 <code>jsx</code> 标识</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token operator">&#x3C;</span>script lang<span class="token operator">=</span><span class="token string">"jsx"</span><span class="token operator">></span>
    <span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>div<span class="token operator">></span><span class="token constant">JSX</span> <span class="token maybe-class-name">Render</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&#x3C;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre></div>
</li>
<li>
<p>如果是 js 文件，用到了 <code>jsx</code> 语法，则需要将后缀名改完 <code>.jsx</code> 。</p>
</li>
</ol>
<h3>alias</h3>
<p>在原项目中我们在 <code>vue.config.js</code> 中 定义了使用了 Webpack 的 <code>resolve.alias</code> 特性：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
	<span class="token string-property property">"configureWebpack"</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@api'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/api'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@components'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@containers'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/containers'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@services'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/services'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@utils'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/utils'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token string-property property">'@@containers'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-containers/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@components'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-components/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@services'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-services/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@utils'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/web-lib/packages/web-lib-utils/lib'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/web-lib/packages/web-lib-styles/lib'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>查看 Vite 的配置文档，发现内置支持了 alias，虽然是通过 <code>@rollup/plugin-alias</code> 来实现的，但是幸运的是配置方式基本是一致的。</p>
<p>因此在<code>vite.config.js</code> 中返回的配置对象中添加对应配置 <code>resolve.alias</code> , 直接复制原有配置对象即可。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@api'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/api'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@components'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@containers'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/containers'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@services'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/services'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@utils'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/utils'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token string-property property">'@@containers'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-containers/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@components'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-components/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@services'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">'node_modules/web-lib/packages/web-lib-services/lib'</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@utils'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/web-lib/packages/web-lib-utils/lib'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">'@@styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/web-lib/packages/web-lib-styles/lib'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>客户端代码中不能使用 node 内部模块</h3>
<p>Vite 中不对模块兼容做处理，因此一些 Node 的内置模块在客户端代码中将无法找到。如果确实需要用到，则需要替换为对应的浏览器兼容实现。</p>
<p>如 <code>path</code> 模块可以换成对应的浏览器兼容实现 <code>path-browserify</code> 。</p>
<p>原有代码使用 <code>path.join</code> 来拼接路径：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports">path</span> <span class="token keyword module">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">genPath</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>paths</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token spread operator">...</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>在 Vite 中则需要修改为对应浏览器兼容实现 <code>path-browserify</code></p>
<p>首先安装 <code>path-browserify</code></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> path-browserify
</code></pre></div>
<p>然后直接替换引用即可</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports">path</span> <span class="token keyword module">from</span> <span class="token string">"path-browserify"</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">genPath</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>paths</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token spread operator">...</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>全局 CSS 变量</h3>
<p>在我们原项目中在<code>vue.config.js</code> 中配置引入了 <a href="https://github.com/shakacode/sass-resources-loader">sass-resources-loader</a> 来实现。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token function">chainWebpack</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 引入全局的sass资源</span>
    <span class="token keyword">const</span> oneOfsMap <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token property-access">module</span><span class="token punctuation">.</span><span class="token method function property-access">rule</span><span class="token punctuation">(</span><span class="token string">'scss'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">oneOfs</span><span class="token punctuation">.</span><span class="token property-access">store</span>
    oneOfsMap<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      item
        <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token string">'sass-resources-loader'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token method function property-access">loader</span><span class="token punctuation">(</span><span class="token string">'sass-resources-loader'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token method function property-access">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">resources</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">'./node_modules/web-lib/packages/web-lib-styles/src/variables/index.scss'</span><span class="token punctuation">,</span>
            <span class="token string">'./src/styles/variables.scss'</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>在 Vite 中我们可以通过 <code> css.preprocessorOptions</code> 进行配置。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@import './node_modules/web-lib/packages/web-lib-styles/src/variables/index.scss';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>如果你细心的话可能会发现，我们的原代码中引入了两个 CSS 文件。而迁移后的我们只引入了一个 CSS 文件。原因是在 <code>./src/styles/variables.scss</code> 中我们使用了下面的语法导出了 js 变量</p>
<div class="remark-highlight"><pre class="language-scss"><code class="language-scss"><span class="token comment">// 导出，供js模块调用</span>
<span class="token selector">:export </span><span class="token punctuation">{</span>
  <span class="token property">bg</span><span class="token punctuation">:</span> <span class="token variable">$bg</span><span class="token punctuation">;</span>
  <span class="token property">text_color</span><span class="token punctuation">:</span> <span class="token variable">$text_color</span><span class="token punctuation">;</span>
  <span class="token property">header_height</span><span class="token punctuation">:</span> <span class="token variable">$header_height</span><span class="token punctuation">;</span>
  <span class="token property">sidebar_width</span><span class="token punctuation">:</span> <span class="token variable">$sidebar_width</span><span class="token punctuation">;</span>
  <span class="token property">header_bg</span><span class="token punctuation">:</span> <span class="token variable">$header_bg</span><span class="token punctuation">;</span>
  <span class="token property">logo_bg</span><span class="token punctuation">:</span> <span class="token variable">$logo_bg</span><span class="token punctuation">;</span>
  <span class="token property">menu_bg</span><span class="token punctuation">:</span> <span class="token variable">$menu_bg</span><span class="token punctuation">;</span>
  <span class="token property">menu_text_color</span><span class="token punctuation">:</span> <span class="token variable">$menu_text_color</span><span class="token punctuation">;</span>
  <span class="token property">menu_active_text_color</span><span class="token punctuation">:</span> <span class="token variable">$menu_active_text_color</span><span class="token punctuation">;</span>
  <span class="token property">menu_hover</span><span class="token punctuation">:</span> <span class="token variable">$menu_hover</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>在 Vite 中会出现，如果配置了 <code>additionalData</code>，将会报错：</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">Error: This <span class="token function">file</span> is already being loaded.
    ╷
  <span class="token number">2</span> │           @import <span class="token string">'./src/styles/variables.scss'</span><span class="token punctuation">;</span>
    │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ╵
    src/styles/variables.scss <span class="token number">2</span>:19  root stylesheet
</code></pre></div>
<p>可参考以下 ISSUE:</p>
<ul>
<li>https://github.com/vitejs/vite/issues/3283</li>
<li>https://github.com/nuxt/vite/issues/117</li>
</ul>
<p>目前我们的解决方式就是不引入，然后在用到的地方手动进行引入规避这个问题，暂时没有特别好的解决方案。</p>
<h3>动态导入 png 等图片资源</h3>
<p>在 Vue CLI 项目中，我们往往需要通过运行时变量来动态确定一些静态资源来进行导入</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> iconSrc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>上面的代码使用 webpack 的 url-loader 或 url-loader，将被自动处理</p>
<p>Vite 处理图片资源的动态引入会比较麻烦，有以下几种方式：</p>
<ol>
<li>
<p>使用 <code>import.meta.globEager</code> glob 引入</p>
<blockquote>
<p>这种方式将会全量的引入匹配的图片</p>
</blockquote>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token keyword module">import</span><span class="token punctuation">.</span><span class="token property-access">meta</span><span class="token punctuation">.</span><span class="token method function property-access">globEager</span><span class="token punctuation">(</span><span class="token string">"./images/*.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将会直接导入所有匹配的图片</span>
<span class="token keyword">const</span> iconSrc <span class="token operator">=</span> iamges<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>iamges<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
<li>
<p>使用 <code>new URL(url, import.meta.url)</code> 引入</p>
<blockquote>
<p>这种方式如果图片不存在在代码层面无法判断</p>
</blockquote>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> iconSrc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword module">import</span><span class="token punctuation">.</span><span class="token property-access">meta</span><span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将返回一个URL实例</span>
</code></pre></div>
</li>
</ol>
<h3>svg 雪碧图</h3>
<p>在原项目中我们使用了 webpack 的 <a href="https://github.com/JetBrains/svg-sprite-loader">svg-sprite-loader</a> 插件来实现 svg 雪碧图。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token function">chainWebpack</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// set svg-sprite-loader</span>
    config<span class="token punctuation">.</span><span class="token property-access">module</span>
      <span class="token punctuation">.</span><span class="token method function property-access">rule</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token property-access">exclude</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/icons'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    config<span class="token punctuation">.</span><span class="token property-access">module</span>
      <span class="token punctuation">.</span><span class="token method function property-access">rule</span><span class="token punctuation">(</span><span class="token string">'icons'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>svg<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token property-access">include</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/icons'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token string">'svg-sprite-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">loader</span><span class="token punctuation">(</span><span class="token string">'svg-sprite-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">symbolId</span><span class="token operator">:</span> <span class="token string">'icon-[name]'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>感谢社区，在 Vite 中我们可以使用插件**<a href="https://github.com/anncwb/vite-plugin-svg-icons"> vite-plugin-svg-icons </a>** 来进行替换以实现相同的功能。使用方式基本一样，具体使用可以查看相应文档。</p>
<blockquote>
<p>注意: svg-sprite-loader 需要手动引入 svg 文件，而 vite-plugin-svg-icons 会自动引入。</p>
</blockquote>
<p>在 Vite 配置的 <code>plugins</code> 选项中引入插件</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports">viteSvgIcons</span> <span class="token keyword module">from</span> <span class="token string">'vite-plugin-svg-icons'</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
 <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
   <span class="token function">viteSvgIcons</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">iconDirs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/icons/svg'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">symbolId</span><span class="token operator">:</span> <span class="token string">'icon-[name]'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>在 <code>main.js</code> 中引入</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token string">"virtual:svg-icons-register"</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>Glob 导入</h3>
<p>在老项目中我们如果使用了 webpack 的 <code>require.context</code> 语法，在 Vite 中会报错。对应的，Vite 提供了<code>import.meta.glob</code> 和 <code>import.meta.globEager</code> 来代替</p>
<p>例如原本的<code>src/store/index.js</code> 中动态引入 modules</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 获取模块文件</span>
<span class="token keyword">const</span> <span class="token function-variable function">getModuleFiles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">"./modules"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>js<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取模块对象表</span>
<span class="token keyword">const</span> <span class="token function-variable function">getModules</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> storeFiles <span class="token operator">=</span> <span class="token function">getModuleFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> modules <span class="token operator">=</span> storeFiles<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">modules<span class="token punctuation">,</span> modulePath</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// set './app.js' => 'app'</span>
    <span class="token keyword">const</span> moduleName <span class="token operator">=</span> modulePath<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token special-escape escape">\.</span><span class="token escape">\/</span><span class="token group punctuation">(</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span><span class="token group punctuation">)</span><span class="token special-escape escape">\.</span><span class="token char-set class-name">\w</span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">storeFiles</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    modules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">return</span> modules<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> modules<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>在 Vite 中改为</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword module">import</span><span class="token punctuation">.</span><span class="token property-access">meta</span><span class="token punctuation">.</span><span class="token method function property-access">globEager</span><span class="token punctuation">(</span><span class="token string">"./modules/*.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  pre<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span><span class="token special-escape escape">\.</span><span class="token escape">\/</span>modules<span class="token escape">\/</span><span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>js<span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> files<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>热更新</h3>
<p>在原本的<code>src/store/index.js</code> 中我们通过以下方式开启了 store 的热更新</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 启用模块热更新</span>
<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token property-access">hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> modulePaths <span class="token operator">=</span> <span class="token function">getModuleFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  module<span class="token punctuation">.</span><span class="token property-access">hot</span><span class="token punctuation">.</span><span class="token method function property-access">accept</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./getters"</span><span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">[</span>modulePaths<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取更新后的模块</span>
    <span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./getters"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加载新模块</span>
    store<span class="token punctuation">.</span><span class="token method function property-access">hotUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      getters<span class="token punctuation">,</span>
      modules<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>在 Vite 中直接移除即可，不需要额外配置。</p>
<h3>在 Vite 配置文件中使用环境变量</h3>
<p>如果想在 Vite 配置中使用环境变量，是不能使用 <code>import.meta.env</code> 来获取的，因为 Vite 是先解析配置文件再解析环境变量的。因此只能通过 <a href="https://github.com/motdotla/dotenv">dotenv</a> 来手动解析访问。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 访问通用环境变量</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">PORT</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dotenv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./.env</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">parsed</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 访问基于运行环境的环境变量</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token constant">VITE_APP_URI_BUSINESS_SERVICE_BASE</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_APP_URI_FILE_SERVICE_BASE</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_APP_USER_SOCTET_BASE</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dotenv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./.env.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">parsed</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token constant">PORT</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>小甜品，来点工程化优化</h2>
<h3>husky+lint-staged 实现提交 lint</h3>
<p>husky 可以让我们定义各种 git-hooks，以实现在 git 生命周期中注入各种钩子来定义我们的工作流，比如做代码校验或者邮件通知等。lint-staged 则让我们可以只对待提交的代码进行处理。结合两者便能实现在期望的 git 生命周期中触发对新提交代码进行一系列操作。最常见的便是在 git 的 commit 之前（<code>pre-commit</code>），对代码进行校验和格式化。</p>
<h4>安装及使用</h4>
<ol>
<li>
<p>安装 <code>husky</code></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> -D husky
</code></pre></div>
</li>
<li>
<p>开启 Git hooks</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> husky <span class="token function">install</span>
</code></pre></div>
</li>
<li>
<p>添加安装项目依赖后自动开启 Git hooks</p>
<p><code>package.json</code></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token punctuation">{</span>
  <span class="token string">"scripts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">"prepare"</span><span class="token builtin class-name">:</span> <span class="token string">"husky install"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
<li>
<p>安装 lint-staged</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> -D lint-staged
</code></pre></div>
</li>
<li>
<p>配置 lint-staged</p>
<p><code>package.json</code></p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"**/*.{vue,js}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">,</span> <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span> <span class="token string">"git add"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"**/*.{html,vue,css,scss}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"prettier --write"</span><span class="token punctuation">,</span>
      <span class="token string">"stylelint --allow-empty-input --fix"</span><span class="token punctuation">,</span>
      <span class="token string">"git add"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"**/*.{md,json}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">,</span> <span class="token string">"git add"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
<li>
<p>配置 hook 在提交时触发 lint-staged</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">"npx lint-staged"</span>
</code></pre></div>
</li>
<li>
<p>将 hook 添加到 git 中</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> .husky/pre-commit
</code></pre></div>
</li>
</ol>
<h4>git 支持的钩子及简单介绍</h4>
<p>| 钩子类型           | 钩子名称           | 触发时机                                                                                           | 钩子参数                  | 可中止 |
| ------------------ | ------------------ | -------------------------------------------------------------------------------------------------- | ------------------------- | ------ |
| 提交工作流钩子     | pre-commit         | 键入提交信息前，即生成本次 commit 对象前。是代码检查、测试运行的好时机。                           | \                         | 是     |
| 提交工作流钩子     | prepare-commit-msg | 启动提交信息编辑器之前，默认信息被创建之后运行。可以在这里修改默认提交信息。                       | filepath commitType SHA-1 | 是     |
| 提交工作流钩子     | commit-msg         | 输入提交信息后，执行提交前发生。可以在这里检查提交信息是否规范，也可以修改提交信息。               | filepath                  | 是     |
| 提交工作流钩子     | post-commit        | 整个提交完成后。一般用于发生通知，例如邮件通知提交等（但是建议在服务器端 post-receive 钩子中做）。 | \                         | 否     |
| 电子邮件工作流钩子 | applypatch-msg     | 生成补丁提交信息后，应用补丁前。可用来检查补丁提交信息是否规范。                                   | mergeFilename             | 是     |
| 电子邮件工作流钩子 | pre-applypatch     | 运行于应用补丁后，产生提交对象之前。因此和 pre-commit 一样是代码检查、测试运行的好时机。           | \                         | 是     |
| 电子邮件工作流钩子 | post-applypatch    | 整个提交完成后。同 post-commit 一样是通知的好时机。                                                | \                         | 否     |
| 其它客户端钩子     | pre-rebase         | 运行于变基前。                                                                                     | \                         | 是     |
| 其它客户端钩子     | post-rewrite       | 被会替换提交记录的命令所触发。如<code>git commit --amend</code>                                               | commandName               | 否     |
| 其它客户端钩子     | post-checkout      | 在 git checkout 成功运行后。                                                                       | commandName               | 否     |
| 其它客户端钩子     | post-merge         | 在 git merge 成功运行后。                                                                          | commandName               | 否     |
| 其它客户端钩子     | pre-push           | 更新了远程引用但是未推送本地提交前。                                                               | originBranchName HEAD     | 是     |</p>
<h2>完整地图</h2>
<p>下面是迁移完成的目录结构以及完整的 <code>vite.config.js</code> 文件</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">├── .browserslistrc
├── .editorconfig
├── .env
├── .env.development
├── .env.production
├── .eslintignore
├── .eslintrc.js
├── .git/
├── .gitignore
├── .husky/
├── .npmrc
├── .nvmrc
├── .prettierignore
├── .prettierrc.js
├── .stylelintignore
├── .stylelintrc.js
├── README.md
├── _templates/
├── dist/
├── dist.tar.gz
├── doc/
├── index.html
├── jsconfig.json
├── package.json
├── public/
├── src/
├── tests/
├── vite.config.js
└── yarn.lock</code></pre></div>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports">path</span> <span class="token keyword module">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">viteSvgIcons</span> <span class="token keyword module">from</span> <span class="token string">"vite-plugin-svg-icons"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createVuePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vite-plugin-vue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">PORT</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dotenv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./.env</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">parsed</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token constant">VITE_URI_BUSINESS_SERVICE_BASE</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_URI_FILE_SERVICE_BASE</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_USER_SOCTET_BASE</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dotenv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./.env.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">parsed</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clearScreen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token function">createVuePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">viteSvgIcons</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">iconDirs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/icons/svg"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">symbolId</span><span class="token operator">:</span> <span class="token string">"icon-[name]"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".mjs"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">"@"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@api"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/api"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@components"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/components"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@containers"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/containers"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@services"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/services"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@styles"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/styles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@utils"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/utils"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token string-property property">"@@containers"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">"node_modules/web-lib/packages/web-lib-containers/lib"</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@@components"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">"node_modules/web-lib/packages/web-lib-components/lib"</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@@services"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
          <span class="token string">"node_modules/web-lib/packages/web-lib-services/lib"</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@@utils"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"node_modules/web-lib/packages/web-lib-utils/lib"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">"@@styles"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"node_modules/web-lib/packages/web-lib-styles/lib"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@import './node_modules/web-lib/packages/web-lib-styles/src/variables/index.scss';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token constant">PORT</span><span class="token punctuation">,</span>
      <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">"/user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token constant">VITE_URI_BUSINESS_SERVICE_BASE</span><span class="token punctuation">,</span>
          <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">"/file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token constant">VITE_URI_BUSINESS_SERVICE_BASE</span><span class="token punctuation">,</span>
          <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">"^/group1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token constant">VITE_URI_FILE_SERVICE_BASE</span><span class="token punctuation">,</span>
          <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 用户中心长链接</span>
        <span class="token string-property property">"^/wsUser"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token constant">VITE_USER_SOCTET_BASE</span><span class="token punctuation">,</span>
          <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token comment">// 实际地址没有这个wsmsg前缀</span>
          <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">"^/wsUser"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token comment">// 解决ws代理断开后会导致dev server down掉的问题</span>
          <span class="token function">onProxyReqWs</span><span class="token punctuation">(</span><span class="token parameter">proxyReq<span class="token punctuation">,</span> req<span class="token punctuation">,</span> socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            socket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
              <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">// console.error(options)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript Learning]]></title>
        <id>https://jiangwenyang.com/posts/TypeScript简明指北</id>
        <link href="https://jiangwenyang.com/posts/TypeScript简明指北"/>
        <updated>2019-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[一份简单的TypeScript入门指南]]></summary>
        <content type="html"><![CDATA[<h2>TL;DR</h2>
<p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。可以把 Typescript 简单理解为带类型的 Javascript。</p>
<p><strong>优点：</strong></p>
<ul>
<li>代码可读性和可维护性</li>
<li>超好的兼容性，从文件类型、变量类型、编译、第三方库等各个方面都兼容现有 JS</li>
<li>TypeScript 是开源的</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>
<p>需要学习成本，对于没接触过后端语言的前端工程师可能成本更高</p>
</li>
<li>
<p>前期会增加开发成本</p>
</li>
<li>
<p>构建成本</p>
</li>
<li>
<p>现有库的声明文件缺失</p>
</li>
</ul>
<h2>起步</h2>
<h3>安装</h3>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -g typescript
<span class="token comment"># yarn global add typescript</span>
</code></pre></div>
<h3>初始化</h3>
<p>使用<code>tsc --init</code> 可以在当前目录下快速生成 tsconfig.json 文件</p>
<h3>hello world</h3>
<p>helloWorld.ts</p>
<div class="remark-highlight"><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> say Hello World</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tomName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>

<span class="token function">helloWorld</span><span class="token punctuation">(</span>tomName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>编译</h3>
<p>使用<code>tsc helloWorld.ts</code>将 ts 文件编译为 js 文件，支持 glob 模式匹配。</p>
<p>编译过程中如果遇到类型错误会提示，但是仍然能够编译成功。</p>
<p>编译完成生成 helloWorld.js 文件</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> name <span class="token operator">+</span> <span class="token string">" say Hello World"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> tomName <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> tomAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token function">helloWorld</span><span class="token punctuation">(</span>tomName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">helloWorld</span><span class="token punctuation">(</span>tomAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>类型</h2>
<h3>基础类型</h3>
<p>Javascript 中的基础类型有：</p>
<ul>
<li>值类型（基本类型）
<ul>
<li>字符串（String）</li>
<li>数字(Number)</li>
<li>布尔(Boolean)</li>
<li>空（Null）</li>
<li>未定义（Undefined）</li>
<li>Symbol</li>
</ul>
</li>
<li>引用数据类型
<ul>
<li>对象(Object)</li>
<li>数组(Array)</li>
<li>函数(Function)</li>
</ul>
</li>
</ul>
<p>Typescript 支持 Javascript 的所有基础类型，并且新增了 <strong>枚举类型</strong> 供我们使用，后文将单独进行介绍。</p>
<h4>基础声明一览</h4>
<div class="remark-highlight"><pre class="language-ts"><code class="language-ts"><span class="token comment">/* 字符串 */</span>
<span class="token comment">// 普通字符串</span>
<span class="token keyword">let</span> firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"TypeScript"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Language"</span><span class="token punctuation">;</span>
<span class="token comment">// 模板字符串</span>
<span class="token keyword">let</span> fullName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">/* 布尔值 */</span>
<span class="token keyword">let</span> isGood<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">/* 数字 */</span>
<span class="token keyword">let</span> myAge<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">/* 数组 */</span>
<span class="token comment">// 使用元素类型后跟[]的方式定义</span>
<span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 使用数组泛型的方式定义</span>
<span class="token keyword">let</span> list2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* 元组Tuple */</span>
<span class="token comment">// ”元组类型“是已知道元素数量和类型的数组的语义类型，在Typescript中并没有定义这一种类型。</span>
<span class="token keyword">let</span> list3<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* 枚举 */</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>

<span class="token comment">/* Any */</span>
<span class="token comment">// Any类型是一种动态类型，即可以为任意类型，适用于在编程阶段无法确定的类型（不要滥用Any类型）。</span>
<span class="token keyword">let</span> notSure<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
notSure <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
notSure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
notSure <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 当不知道数组中元素类型时，可以使用any类型</span>
<span class="token keyword">let</span> list4<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"free"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* Void */</span>
<span class="token comment">// Void类型代表没有任何类型，Void类型只能赋予undefined和null，一般用于没有返回值的函数的返回值类型</span>
<span class="token keyword">function</span> <span class="token function">noReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is a function no return value!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Null 和 Undefined */</span>
<span class="token comment">// null 和 undefined 各自对应 null 和 undefined 类型，这两个类型是所有其他类型的子类型。</span>
<span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">/* Never类型 */</span>
<span class="token comment">// never类型表示的是那些永不存在的值的类型</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回never的函数必须存在无法达到的终点</span>
<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Object类型</span>
<span class="token keyword">const</span> obj<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj3<span class="token operator">:</span> object <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>枚举</h3>
<p>使用枚举我们可以定义一些带名字的常量 。</p>
<p>枚举的特性：</p>
<ul>
<li>支持名称和值的相互映射</li>
<li>自增长特性</li>
</ul>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">enum</span> <span class="token maybe-class-name">Direction</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">Up</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Down</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Left</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Right</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token maybe-class-name">Color</span> <span class="token punctuation">{</span>
  <span class="token constant">RED</span><span class="token punctuation">,</span>
  <span class="token constant">GREEN</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token maybe-class-name">DirectionString</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">Up</span> <span class="token operator">=</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Down</span> <span class="token operator">=</span> <span class="token string">"DOWN"</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Left</span> <span class="token operator">=</span> <span class="token string">"LEFT"</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Right</span> <span class="token operator">=</span> <span class="token string">"RIGHT"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>将会编译成：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token maybe-class-name">Direction</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Direction</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token string">"Up"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Up"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token string">"Down"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Down"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token string">"Left"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Left"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token string">"Right"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Right"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token maybe-class-name">Color</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Color</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token string">"RED"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"RED"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token string">"GREEN"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"GREEN"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token maybe-class-name">Color</span><span class="token punctuation">[</span><span class="token string">"BLUE"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BLUE"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token maybe-class-name">Color</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token maybe-class-name">DirectionString</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">DirectionString</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">DirectionString</span><span class="token punctuation">[</span><span class="token string">"Up"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"UP"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">DirectionString</span><span class="token punctuation">[</span><span class="token string">"Down"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"DOWN"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">DirectionString</span><span class="token punctuation">[</span><span class="token string">"Left"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"LEFT"</span><span class="token punctuation">;</span>
  <span class="token maybe-class-name">DirectionString</span><span class="token punctuation">[</span><span class="token string">"Right"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"RIGHT"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token maybe-class-name">DirectionString</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token maybe-class-name">DirectionString</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>可以看到，并没有”黑魔法“。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token string">"Down"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Direction</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Down'</span>
</code></pre></div>
<h3>函数</h3>
<p>Javascript 中的函数有两种类型：命名函数、匿名函数</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 命名函数</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匿名函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>使用 Typescript 分别创建这两种类型的函数</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// 命名函数</span>
<span class="token comment">// 完整的函数声明</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 一般我们可以省略返回值声明，TS会自动推断出返回值类型。</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匿名函数</span>
<span class="token comment">// 只指定函数类型</span>
<span class="token keyword">let</span> <span class="token function-variable function">myAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 完整的函数类型</span>
<span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>接口</h3>
<p>接口用于定义结构和类型。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 不使用接口</span>
<span class="token keyword">const</span> <span class="token function">foo</span><span class="token punctuation">(</span>fooObj<span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'foo'</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token operator">:</span>number<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>fooObj<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// 'foo'</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'my'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span>

<span class="token comment">// 使用接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span>number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fooObj</span><span class="token operator">:</span><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>fooObj<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// 'foo'</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>一个更复杂的例子</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">FooObj</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>fooObj<span class="token operator">:</span> <span class="token maybe-class-name">FooObj</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fooObj<span class="token operator">:</span> <span class="token maybe-class-name">FooObj</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>fooObj<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'foo'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">method</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>泛型</h3>
<p><code>泛型</code>用来创建可重用的组件，一个组件可以支持多种类型的数据。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stringFoo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"foo1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> numberFoo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>高级类型</h3>
<ul>
<li>
<h4>交叉类型（Intersection Types）</h4>
<p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 相当于对所有类型取合集。</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Type1</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Type2</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> type1<span class="token operator">:</span> <span class="token maybe-class-name">Type1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">"type1"</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> type2<span class="token operator">:</span> <span class="token maybe-class-name">Type2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">method</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> type1<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mixedType<span class="token operator">:</span> <span class="token maybe-class-name">Type1</span> <span class="token operator">&#x26;</span> <span class="token maybe-class-name">Type2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>type1<span class="token punctuation">,</span> <span class="token spread operator">...</span>type2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<h4>联合类型（Union Types）</h4>
<p>联合类型表示一个值可以是几种类型之一。 写法是用竖线（ <code>|</code>）分隔每个类型，因此 <code>number | string | boolean</code>表示一个值可以是 <code>number</code>， <code>string</code>，或 <code>boolean</code>。</p>
<blockquote>
<p>如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。</p>
</blockquote>
</li>
</ul>
<h2>Typescript 搭配 React</h2>
<p>Typescript 和 React 可以很好的一起工作，一般我们使用 React 离不开 Webpack。因此在这里介绍下如何构建 Typescript+React+Webpack 技术栈。</p>
<h3>安装依赖：</h3>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i  react react-dom
<span class="token function">npm</span> i -D webpack-cli webpack @types/react @types/react-dom
</code></pre></div>
<p>在 Webpack 中解析 Typescript 需要使用 loader，目前主要有以下几种解决方案：</p>
<ul>
<li>awesome-typescript-loader （没用过。。。）</li>
<li>ts-loader (官方)</li>
<li>babel-loader (babel 7.0 版本之后)</li>
</ul>
<p>很多情况下我们使用了 ts-loader 之后仍然需要使用 babel-loader 转换一些 ts-loader 无法转换的语法特性，因此为什么不直接使用 babel-loader 来转换 ts 文件呢。babel 从 7.0 版本后开始支持编译 Typescript。在这里主要介绍一下使用 babel-loader 编译 Typescript 和 React。</p>
<ul>
<li>
<p>安装 babel-core 和 babel-loader</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -D @babel/core babel-loader@latest
</code></pre></div>
</li>
<li>
<p>安装@babel/preset-env 编译 ES 最新的语法</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -D @babel/preset-env
</code></pre></div>
</li>
<li>
<p>安装@babel/preset-react 用于编译 React</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -D @babel/preset-react
</code></pre></div>
</li>
<li>
<p>安装 @babel/preset-typescript 用于编译 Typescript</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -D @babel/preset-typescript
</code></pre></div>
</li>
<li>
<p>安装 @babel/plugin-proposal-class-properties 插件支持类的静态属性语法</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">Myclass</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i -D @babel/plugin-proposal-class-properties
</code></pre></div>
</li>
</ul>
<h3>配置 babel</h3>
<p>在根目录下新建并配置<code>.babelrc</code>文件</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"@babel/preset-react"</span><span class="token punctuation">,</span>
    <span class="token string">"@babel/preset-typescript"</span><span class="token punctuation">,</span>
    <span class="token string">"@babel/preset-env"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/proposal-class-properties"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>配置 Webpack</h3>
<p>新建并配置<code>webpack.config.js</code>文件</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>tsx<span class="token quantifier number">?</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>配置 package.json script</h3>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.config.js"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>函数式组件</h3>
<p>ButtonFC.tsx</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">PropTypes</span></span> <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">ButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">HTMLAttributes</span></span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">HTMLButtonElement</span><span class="token operator">></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token maybe-class-name">Button</span><span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">ButtonProps</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> className<span class="token punctuation">,</span> <span class="token spread operator">...</span>otherProps <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">const</span> buttonClassName <span class="token operator">=</span> className<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonClassName<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>otherProps<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token maybe-class-name">Button</span><span class="token punctuation">.</span><span class="token property-access">propTypes</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token maybe-class-name">PropTypes</span><span class="token punctuation">.</span><span class="token property-access">string</span><span class="token punctuation">.</span><span class="token property-access">isRequired</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Button</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>类组件</h3>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">PropTypes</span></span> <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">ButtonCountProps</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">HTMLAttributes</span></span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">HTMLButtonElement</span><span class="token operator">></span> <span class="token punctuation">{</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ButtonCountState</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ButtonCount</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Component</span></span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">ButtonCountProps</span><span class="token punctuation">,</span> <span class="token maybe-class-name">ButtonCountState</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token maybe-class-name">PropTypes</span><span class="token punctuation">.</span><span class="token property-access">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span><span class="token property-access">count</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">count</span><span class="token punctuation">}</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">ButtonCount</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>入口文件</h3>
<p>App.ts</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">ButtonFC</span></span> <span class="token keyword">from</span> <span class="token string">"./ButtonFC"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">ButtonClass</span></span> <span class="token keyword">from</span> <span class="token string">"./ButtonClass"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token maybe-class-name">App</span><span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access"><span class="token maybe-class-name">FC</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">ButtonFC</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ButtonFC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">ButtonFC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">ButtonFC</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">ButtonClass</span></span><span class="token punctuation">></span></span><span class="token plain-text">ButtonClass</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">ButtonClass</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">App</span><span class="token punctuation">;</span>
</code></pre></div>
<p>index.tsx</p>
<div class="remark-highlight"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">ReactDOM</span></span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">App</span></span> <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>

<span class="token maybe-class-name">ReactDOM</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>编译打包</h3>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> run start
</code></pre></div>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS中的空白符和换行处理]]></title>
        <id>https://jiangwenyang.com/posts/CSS中的空白符和换行处理</id>
        <link href="https://jiangwenyang.com/posts/CSS中的空白符和换行处理"/>
        <updated>2018-09-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[简单介绍CSS中空白符和换行处理，主要介绍white-space、word-break、word-wrap三个属性]]></summary>
        <content type="html"><![CDATA[<h2>CSS 中的空白符和换行处理</h2>
<p>CSS 中主要有三个属性用来处理空白符和换行：<code>white-space</code> <code>word-break</code> <code>word-wrap</code> ，长得有点相似，在中文环境下用到的机会不太多，但是每次用到都傻傻分不清楚，下面整理下这几个属性的区别。</p>
<h3>white-space</h3>
<p><code>white-space</code> 看名字就知道主要是用来处理空白符的，但是也涉及到换行的问题。</p>
<p><code>white-space</code> 的有下列的值，对应其中的空白符和换行符处理情况：</p>
<p>| 属性              | 空白符                 | 换行符             | 超出是否自动换行 |
| ----------------- | ---------------------- | ------------------ | ---------------- |
| normal ( 默认值 ) | 多个连续空格合并为一个 | 视为空白符一起处理 | 是               |
| pre               | 保留                   | 保留               | 否               |
| pre-wrap          | 保留                   | 保留               | 是               |
| pre-line          | 多个连续空格合并为一个 | 保留               | 是               |
| no-wrap           | 多个连续空格合并为一个 | 视为空白符一起处理 | 否               |</p>
<p><code>white-space</code> 主要定义空白符和换行符的处理，以及超出是否换行。而对于超出时如何换行则由下面两位进行定义。</p>
<h3>word-break</h3>
<p><code>word-break</code> 定义了换行时对单词如何进行处理。包括下面三个关键字值：</p>
<p>| 值                | 描述                                                                                                                       | 单词过长是否会自动截断 |
| ----------------- | -------------------------------------------------------------------------------------------------------------------------- | ---------------------- |
| normal （默认值） | 默认换行规则                                                                                                               | 否                     |
| break-all         | 允许任意非 CJK(Chinese/Japanese/Korean)文本间的单词断行。                                                                  | 是                     |
| keep-all          | 不允许 CJK(Chinese/Japanese/Korean)文本中的单词换行，只能在半角空格或连字符处换行。非 CJK 文本的行为实际上和<code>normal</code>一致。 | 否                     |</p>
<p><code>break-all</code> 的兼容性比较好，几乎所有浏览器都支持。<code>keep-all</code> 支持率比较查，并且实用性不强。</p>
<h3>word-wrap</h3>
<p><code>word-wrap</code> 和 <code>word-break</code> 很相似，但是其实仔细研究下你会发现他们区别挺大。<code>word-wrap</code> 支持下面两个关键字属性：</p>
<p>| 值                | 描述                                                                                         | 单词过长是否会自动截断 |
| ----------------- | -------------------------------------------------------------------------------------------- | ---------------------- |
| normal （默认值） | 默认的换行规则                                                                               | 否                     |
| break-word        | 表示如果行内没有多余的地方容纳该单词到结尾，则那些正常的不能被被分割的单词会被强制分割换行。 | 否                     |</p>
<blockquote>
<p>**MDN 注：**word-wrap 属性原本属于微软的一个私有属性，在 CSS3 现在的文本规范草案中已经被重名为 overflow-wrap 。 word-wrap 现在被当作 overflow-wrap 的 “别名”。 稳定的谷歌 Chrome 和 Opera 浏览器版本支持这种新语法。</p>
</blockquote>
<h3>word-break:break-all; 和 word-wrap:break-word；区别</h3>
<ul>
<li>
<p>相同点：两者都控制换行时如何处理超出的单词。</p>
</li>
<li>
<p>不同点：</p>
<ul>
<li><code>word-break:break-all;</code> 简单粗暴，直接将单词截断，超出部分在下一行进行显示，即会将单词一分为二。</li>
<li><code>word-wrap:break-word;</code> 比较温柔，不会将单词截断，会将超出的单词直接移到下一行显示，如果一行无法显示单词，也不会进行截断，而是让它超出。</li>
</ul>
</li>
</ul>
<p><code>word-wrap:break-word;</code> 老师在指挥排队：</p>
<blockquote>
<p>糟糕，这一排站不下了，怎么办？</p>
<p>你直接去下面一排第一个，后面的人跟着你继续排。</p>
</blockquote>
<p><code>word-break:break-all;</code> 老师在指挥排队：</p>
<blockquote>
<p>糟糕，这一排站不下了，怎么办？</p>
<p>把你掰成两半，一半放到这排的最后，一半放到下面一排的开头。（太血腥了！！！）</p>
</blockquote>
<p><a href="https://stackblitz.com/edit/word-wrap-and-word-break?file=index.html">DEMO</a></p>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端自动化测试]]></title>
        <id>https://jiangwenyang.com/posts/前端自动化测试</id>
        <link href="https://jiangwenyang.com/posts/前端自动化测试"/>
        <updated>2018-06-19T10:20:26.000Z</updated>
        <summary type="html"><![CDATA[前端自动化测试概念以及部分基础工具库介绍，带你入门前端测试]]></summary>
        <content type="html"><![CDATA[<h2>为什么需要自动化测试</h2>
<p>项目经过不断的开发，最终肯定会趋于稳定，在适当的时机下引入自动化测试能及早发现问题，保证产品的质量。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">自动化的收益 = 迭代次数 * 全手动执行成本 - 首次自动化成本 - 维护次数 * 维护成本</code></pre></div>
<h2>测试</h2>
<p>测试作为完整的开发流程中最后的一环，是保证产品质量重要的一环。而前端测试一般在产品开发流程中属于偏后的环节，在整个开发架构中属于较高层次，前端测试更加偏向于 GUI 的特性，因此前端的测试难度很大。</p>
<h3>测试方法</h3>
<h4>黑盒测试</h4>
<p>黑盒测试一般也被称为功能测试，黑盒测试要求测试人员将程序看作一个整体，不考虑其内部结构和特性，只是按照期望验证程序是否能正常工作。黑盒测试更接近用户使用的真实场景，因为对于用户来说，程序的内部是不可见的。</p>
<p>以下是黑盒测试中常用的测试方法：</p>
<ul>
<li>
<p>等价类划分</p>
<p>等价类划分主要是在已有输入规则的情况下，确定合法输入与非法输入区间来设计测试用例</p>
<p>如：如网站登录密码必须由 6 位数字构成</p>
<p>有效等价类：6 位数字</p>
<p>无效等价类：位数>6，位数&#x3C;6，全角数字，字母、特殊字符等......</p>
</li>
<li>
<p>边界值分析</p>
<p>顾名思义，主要是根据输入输出范围的边界值进行测试用例的设计。原因是<strong>大量的错误往往发生在输入或输出范围的边界上</strong>（程序员往往在容易在这些地方犯错），边界值分析一般结合等价类划分进行使用，等价类划分区间边界一般就是边界值。</p>
<p>如：如网站登录密码长度必须为 6-12 位</p>
<p>有效等价类：位数[6-12]</p>
<p>无效等价类：位数&#x3C;6 位数>12</p>
<p>边界值：6 12</p>
</li>
<li>
<p>错误推测、异常分析等</p>
<p>黑盒测试还包含一些其他的测试方式，由于测试往往是不可穷举性的，因此如何如何设计测试用例保证测试覆盖尽可能多的场景，不仅仅是依靠这些总结出来的<strong>方法</strong>，也考验测试人员自身的<strong>天赋</strong>。</p>
</li>
</ul>
<h4>白盒测试</h4>
<p>白盒测试是基于代码本身的测试，一般指对代码逻辑结构的测试。白盒测试是在了解代码结构的前提下进行的测试，目的是遍历尽可能多的可执行路径，得出测试数据。白盒测试方法比较多，主要是<strong>逻辑覆盖</strong>，即检查代码的每一行、每一次判断结果。</p>
<p>逻辑覆盖方式从发现错误能力上排序主要有以下几种：</p>
<ol>
<li>语句覆盖 （让程序执行到每一行语句）</li>
<li>判定覆盖 （让每一个判断语句满足真假）</li>
<li>条件覆盖 （让每一个判断语句里面的每一个条件都取到真假值）</li>
<li>判定/条件覆盖 （同时满足 2 和 3）</li>
<li>条件组合覆盖 （判断语句中条件的每种组合至少出现一次）</li>
<li>路径覆盖 （覆盖程序每一条执行路径）</li>
</ol>
<h3>测试分类</h3>
<p>按照软件工程自底而上的概念，前端测试一般分为单元测试（Unit Testing ）、集成测试（Integration Testing）和端到端测试（E2E Testing）。从下面的图可以看出，从底向上测试的复杂度将不断提高，另一方面测试的收益反而不断降低的。</p>
<p><img src="http://ow67vzejn.bkt.clouddn.com/18-6-8/26578640.jpg" alt="前端测试模型"></p>
<h4>单元测试（Unit Testing）</h4>
<p>单元测试是指对程序中<strong>最小</strong>可测试单元进行的测试，一般而言是指对函数进行的测试。单元测试混合了编程和测试，由于是对代码内部逻辑进行测试，因此更多的使用白盒的测试方式。单元测试能强迫开发者写出更可测试的代码，一般而言这样的代码可读性也会高很多，同时良好的单元测试可以作为被测代码的文档使用。</p>
<blockquote>
<p>函数可测性：可测试性高的函数一般而言是纯函数，即输入输出可预测的函数。即在函数内部不修改传入参数，不执行 API 请求或者 IO 请求，不调用其他非纯函数如 Math.random()等</p>
</blockquote>
<p>单元测试最大的特点是测试对象的细颗粒度性，即被测对象独立性高、复杂度低。</p>
<h5>前端单元测试</h5>
<p>前端单元测试和后端单元测试最大的区别在于，前端单元测试无法避免的会存在兼容性问题，如调用浏览器兼容性 API，以及对 BOM（浏览器对象模型）API 的调用，因此前端单元测试需要运行在（伪）浏览器环境下。</p>
<p>就测试运行环境分类，主要有以下几种测试方案：</p>
<ul>
<li>基于<a href="https://github.com/jsdom/jsdom">JSDOM</a>
<ul>
<li><strong>优点</strong>：快，执行速度最快，因为不需要浏览器启动</li>
<li><strong>缺点</strong>：无法测试如 seesion 或 cookie 等相关操作，并且由于不是真实浏览器环境因此无法保证一些如 Dom 相关和 BOM 相关的操作的正确性，并且 JSDOM 未实现 localStorage，如果需要进行覆盖，只能使用第三方库如<a href="https://github.com/lmaccherone/node-localstorage">node-localStorage</a> （这个库本身对与执行环境的判断有一些问题）进行模拟。</li>
</ul>
</li>
</ul>
<ul>
<li>基于<a href="https://github.com/ariya/phantomjs">PhantomJs</a>等无头浏览器
<ul>
<li><strong>优点</strong>: 相对较快，并且具有真实的 DOM 环境</li>
<li><strong>缺点</strong>: 同样不在真实浏览器中运行，难以调试，并且项目 issue 非常多，puppeteer 发布后作者宣布不再维护</li>
</ul>
</li>
<li>使用 Karma 或 puppeteer 等工具，调用真实的浏览器环境进行测试
<ul>
<li><strong>优点</strong>：配置简单，能在真实的浏览器中运行测试，并且 karma 能将测试代码在多个浏览器中运行,同时方便调试</li>
<li><strong>缺点</strong>: 唯一的缺点就是相对前两者运行稍慢，但是在单元测试可接受范围内</li>
</ul>
</li>
</ul>
<h6>前端单元测试工具</h6>
<p>前端在近几年如雨后春笋一般涌现出非常多的测试框架和相关工具。</p>
<ul>
<li>测试平台
<ul>
<li><a href="https://karma-runner.github.io/2.0/index.html">karma</a> -- Google Angular 团队开发的测试运行平台，配置简单灵活，能够很方便将测试在多个真实浏览器中运行。</li>
</ul>
</li>
</ul>
<ul>
<li>测试框架
<ul>
<li><a href="https://mochajs.org/">mocha</a> -- Tj 大神开发的很优秀的测试框架，有完善的生态系统，简单的测试组织方式，不对断言库和工具做任何限制，非常灵活。</li>
<li><a href="https://jasmine.github.io/">jasmine</a> -- 和 Mocha 语法非常相似，最大的差别是提供了自建的断言和 Spy 和 Stub</li>
<li><a href="https://facebook.github.io/jest/">jest</a> -- facebook 出品的大而全的测试框架，React 官方推荐的单元测试框架，配置简单运行速度快。（备注：无法和 Karma 进行集成）</li>
<li><a href="https://github.com/avajs/ava">AVA</a> -- 和上面的测试框架最大的区别在于多线程，运行速度更快。</li>
<li>其他 -- 还有一些其他的前端测试框架，但是相似度比较高，无非是对断言和测试桩等工具的集成度不同，如果考虑稳定以及成熟度建议选择 Mocha，对测试运行速度有非常高的要求可以考虑 jest 和 AVA</li>
</ul>
</li>
<li>测试辅助工具
<ul>
<li>断言库 -- <a href="https://github.com/chaijs/chai">Chai</a> 如果单元测试不跑在真实的浏览器环境中，可以简单使用 node 的 assert，但是建议使用 Chai 作为断言库（提供了 TDD 和 BDD 风格多种断言方式，并且生态系统繁荣）。</li>
<li>测试桩（又称为测试替身） -- <a href="http://sinonjs.org/">Sinon</a>、<a href="https://github.com/testdouble/testdouble.js/">testDouble</a>等工具提供了如测试桩、拦截模拟请求、”时间旅行“等功能，主要用于解决"函数不纯"（比如测试回调是否被正确调用，XHR 是否正确发起请求，时间延迟后函数行为是否正确）的测试问题。</li>
</ul>
</li>
<li>测试覆盖率工具
<ul>
<li><a href="https://github.com/gotwarlost/istanbul">istanbul</a> istanbul 的基础实现，提供了命令行等工具，但是无法解决代码编译打点的问题</li>
<li><a href="https://github.com/webpack-contrib/istanbul-instrumenter-loader">istanbul-instrumenter-loader</a> istanbul 的 Webpack 插件，能解决代码编译打点和测试报告输出的问题</li>
</ul>
</li>
</ul>
<blockquote>
<p>其他参考</p>
<ul>
<li><a href="https://github.com/domenic/chai-as-promised">chai-as-promise</a> 扩展 Chai 在 Promise 上的断言功能</li>
<li><a href="https://github.com/domenic/sinon-chai">sinon-chai</a> 扩展 Chai 搭配 Sinon 时的断言功能</li>
<li><a href="https://github.com/chaijs/chai-jquery">chai-jquery</a> 扩展 Chai 在 UI 测试中的断言</li>
<li><a href="https://istanbul.js.org/">istanbul 官网</a> 介绍了 istanbul 如何与多中测试框架集成以及对于 Typescript 等语言的支持</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/06/istanbul.html">阮一峰-代码覆盖率工具 Istanbul 入门教程</a> 介绍了代码覆盖率相关的概念以及 Istanbul 搭配 Mocha 的简单使用</li>
</ul>
</blockquote>
<h6>常见单元测试栗子</h6>
<p>在框架选型的时候考虑到以下条件或问题：</p>
<ol>
<li>测试需要在真实浏览器中运行</li>
<li>测试执行需要足够迅速</li>
<li>被测代码为 Typescript，因此使用需要解决编译和打点的问题</li>
<li>方便持续集成</li>
</ol>
<p>最后选择使用 Karma+Webpack+Mocha+Chai+Sion+istanbul-instrumenter-loader 的解决方案。</p>
<p>项目结构:</p>
<p><img src="http://ow67vzejn.bkt.clouddn.com/18-6-15/99549910.jpg" alt=""></p>
<p>karma 可以很方便的与 Webpack 进行集成，只需要指定需要预编译的文件和使用的编译工具即可。</p>
<p><em>karma.conf.js 配置 Webpack 编译</em></p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token keyword module">export</span><span class="token operator">=</span><span class="token function">funciton</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    config<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">frameworks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'mocha'</span><span class="token punctuation">,</span> <span class="token string">'chai'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">'tests/setup.js'</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">preprocessors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">'tests/setup.js'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'webpack'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">webpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span>node_modules<span class="token alternation keyword">|</span>libs<span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>test<span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'istanbul-instrumenter-loader'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token literal-property property">esModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                  <span class="token literal-property property">produceSourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// karma-server support ts/tsx mime</span>
        <span class="token literal-property property">mime</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">'text/x-typescript'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">,</span> <span class="token string">'tsx'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>通过上面的配置中需要注意几个地方：</p>
<ul>
<li>
<p>setup.js</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 导入所有测试用例</span>
<span class="token keyword">const</span> testsContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">"../src"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>test<span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testsContext<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>testsContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>使用 webpack 提供的<a href="https://webpack.docschina.org/guides/dependency-management/">require.context()</a>将所有测试文件统一导入，然后 karma 将 setup.js 作为入口调用 webpack 进行编译，然后测试执行。</p>
</li>
<li>
<p>mime 配置对于 ts/tsx 的支持</p>
</li>
<li>
<p>istanbul-instrumenter-loader loader 调用顺序必须在 ts 或 babel 等编译工具编译之前否则将不准确，排除测试文件本身和依赖库覆盖率计算</p>
<ul>
<li>使用 enforce: 'post',确保 loader 调用顺序</li>
<li>使用 exclude 排除第三方库和测试文件本身覆盖率计算</li>
</ul>
</li>
</ul>
<blockquote>
<p>其他配置请参考 karma 和 webpack，以及相关插件的文档</p>
</blockquote>
<ul>
<li>
<p>纯函数测试</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/**
 * 验证邮箱
 * <span class="token keyword">@params</span> input 输入值
 * <span class="token keyword">@return</span> 返回是否是邮箱
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">mail</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">input</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token anchor function">^</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-set class-name">\w</span><span class="token escape">\-</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-set class-name">\w</span><span class="token escape">\-</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">*</span>@<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-set class-name">\w</span><span class="token escape">\-</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-set class-name">\w</span><span class="token escape">\-</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">+</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"验证邮箱#mail"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"传入邮箱字符串，返回true"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"abc@123.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"abc@123.com.cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"a-b-c@123.com.cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"a_b_c@123.com.cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"a_b_c@123-4-5-6.com.cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"传入非邮箱字符串，返回true"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"abc@"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"@123.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"abc@123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"123.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>Promise 或其他异步操作的测试</p>
<p>Mocha 支持异步测试，主要有下面三种方式：</p>
<ul>
<li>
<p>使用 async await</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">it(async ()=&#x26;gt;{
    await asynchronous()
    // 一些断言
})</code></pre></div>
</li>
<li>
<p>使用回调函数</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">it(done=&#x26;gt;{
    Promise.resolve().then(()=&#x26;gt;{
        // 断言
        done() // 测试结束后调用回调标识测试结束
    })
})</code></pre></div>
</li>
<li>
<p>返回一个 Promise</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">it(()=&#x26;gt;{
  // 直接返回一个Promise，Mocha会自动等待Promise resolve
    return Promise.resolve().then(()=&#x26;gt;{
        // 断言
    })
})</code></pre></div>
</li>
</ul>
</li>
<li>
<p>含 HTTP 请求的测试</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用XHR发送ajax请求</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"method为GET"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> fake<span class="token punctuation">.</span><span class="token method function property-access">useFakeXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onCreate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    requests<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">respond</span><span class="token punctuation">(</span>
    <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">'[{ "id": 12, "comment": "Hey there" }]'</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/uri"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token method function property-access">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">method</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>或者封装一下 fakeXMLHttpRequest</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">/**
 * 使用fakeXMLHttpRequest
 * @param callback 回调函数，接受请求对象作为参数
 */
export function useFakeXHR(callback) {
    const fakeXHR = useFakeXMLHttpRequest();
    const requests: Array&#x26;lt;any&#x26;gt; = []; // requests会将引用传递给callback，因此使用const，避免指针被改写。

    fakeXHR.onCreate = request =&#x26;gt; requests.push(request);

    callback(requests, fakeXHR.restore.bind(fakeXHR));
}

it(&#x26;#39;method为GET&#x26;#39;, (done) =&#x26;gt; {
    useFakeXHR((request, restore) =&#x26;gt; {
        get(&#x26;#39;/uri&#x26;#39;).then(() =&#x26;gt; {
            restore();
            done();
        });
        expect(request[0].method).equal(&#x26;#39;GET&#x26;#39;);
        request[0].respond();
    })
})</code></pre></div>
<p>useFakeXHR 封装了对 Sinon 的 useFakeXMLHttpRequest，实现对 XHR 请求的 fake</p>
<blockquote>
<p><a href="http://sinonjs.org/releases/v6.0.0/fake-xhr-and-server/">Fake XHR and server - Sinon.JS</a> 官方文档参考</p>
<p>Fake XHR 和 Fake server 的区别：后者是对前者的更高层次的封装，并且 Fake server 的颗粒度更大</p>
</blockquote>
</li>
<li>
<p>时间相关的测试</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 延迟delay毫秒后调用callback</span>
<span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">delay<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"timer"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> clock <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token method function property-access">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> spy <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token method function property-access">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 测试替身</span>
  <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> spy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  clock<span class="token punctuation">.</span><span class="token method function property-access">tick</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "时间旅行，去到1000ms后"</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token property-access">called</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
  clock<span class="token punctuation">.</span><span class="token method function property-access">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复时间，否则将影响到其他测试</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>浏览器相关 API 调用的测试</p>
<ul>
<li>session 的栗子</li>
</ul>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/**
 * WebStorage封装
 * <span class="token keyword">@param</span> <span class="token parameter">storage</span> 存储对象，支持localStorage和sessionStorage
 * <span class="token keyword">@return</span> 返回封装的存储接口
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Storage</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">storage</span><span class="token operator">:</span> <span class="token maybe-class-name">Storage</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 获取session
   * <span class="token keyword">@param</span> <span class="token parameter">key</span>
   * <span class="token keyword">@return</span> 返回JSON解析后的值
   */</span>
  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token method function property-access">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function"><span class="token maybe-class-name">Storage</span></span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">sessionStorage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token string">"清空sessionStorage"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">sessionStorage</span><span class="token punctuation">.</span><span class="token method function property-access">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"获取session#get"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"获取简单类型值"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">sessionStorage</span><span class="token punctuation">.</span><span class="token method function property-access">setItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">expect</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"获取引用类型值"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">sessionStorage</span><span class="token punctuation">.</span><span class="token method function property-access">setItem</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">expect</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">deep</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"获取不存在的session"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">expect</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token keyword null nil">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<ul>
<li>设置 title 的栗子</li>
</ul>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/**
 * 设置tab页title
 * <span class="token keyword">@param</span> <span class="token parameter">title</span>
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当页面中嵌入了flash，并且页面的地址中含有“片段标识”（即网址#之后的文字）IE标签页标题被自动修改为网址片段标识</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">userAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">app</span> <span class="token operator">===</span> <span class="token maybe-class-name">Browser</span><span class="token punctuation">.</span><span class="token constant">MSIE</span> <span class="token operator">||</span> <span class="token function">userAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">app</span> <span class="token operator">===</span> <span class="token maybe-class-name">Browser</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Edge</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">title</span> <span class="token operator">=</span> title<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"设置tab页title#setTitle"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 这个测试不是个好的测试，测试代码更改了页面DOM结构</span>
  <span class="token keyword">const</span> originalTitle <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">;</span> <span class="token comment">// 保存原始title，测试结束后恢复</span>
  <span class="token keyword">const</span> clock <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token method function property-access">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"test title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  clock<span class="token punctuation">.</span><span class="token method function property-access">tick</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token string">"test title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setTitle</span><span class="token punctuation">(</span>originalTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复原本的title</span>
  clock<span class="token punctuation">.</span><span class="token method function property-access">tick</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  clock<span class="token punctuation">.</span><span class="token method function property-access">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
</ul>
<h6>React 组件单元测试</h6>
<p>React 组件的测试本质上和其他单元测试区别不大，但是 React 组件单元测试由于涉及到“浏览器渲染”问题，在复杂度上高很多，并且 React 组件除基础 UI 组件（如 Button、Link）等底层组件外，其实很难保持其“规模”在“最小测试单元”这一范围内，虽然可以通过“浅渲染”（不渲染子组件）降低组件的复杂度。从单元测试的范畴和意义出发来看，其实大多数 UI 组件的测试很难归入单元测试中。由于“大家貌似都觉得理所应当”，本文档依然将 UI 组件测试作为单元测试介绍。</p>
<blockquote>
<p>没有打开盒子时，我们无法决定猫是否还活着。</p>
</blockquote>
<p>React 并非一个黑盒，因此想要测试 React，必须先了解 React 是如何渲染的。当然，咱们不需要去了解 React 的源码，知道个大概就好了。</p>
<p>简单来讲，一个 React 组件渲染到页面中需要下面几步。</p>
<ol>
<li>根据状态计算出虚拟 DOM 对象</li>
<li>根据虚拟 DOM 生成真实的 Dom 结构</li>
<li>挂载 Dom 到页面中</li>
</ol>
<p>但是在测试中，我们不需要挂载组件到页面中，只需要有一个 Dom 环境即可，如果你不需要完整的渲染组件甚至可以没有 Dom 环境。</p>
<p><strong><a href="http://airbnb.io/enzyme/">Enzyme</a></strong></p>
<p>Enzyme（酶，催化剂）是 Airbnb 公司提供的 React 测试工具，提供了 Shallow Rendering（浅渲染） | Full Rendering （全渲染）| Static Rendering （静态渲染）几种方式来渲染方式来测试 React 组件，一般常用浅渲染的方式进行测试。</p>
<blockquote>
<p>使用 Enzyme 进行测试前需要先初始化 React 适配器，具体配置请查看官方手册</p>
</blockquote>
<ul>
<li>
<p>Shallow Rendering</p>
<p>只渲染组件最外层结构，不会渲染子组件</p>
<p>一个完整的 Shallow 渲染测试的实例：</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> classnames</span> <span class="token keyword module">from</span> <span class="token string">"classnames"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ClassName</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"../helper"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> styles</span> <span class="token keyword module">from</span> <span class="token string">"./styles.desktop.css"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">AppBar</span><span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">StatelessComponent</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>any</span><span class="token punctuation">></span></span><span class="token plain-text"> = function AppBar({</span>
<span class="token plain-text">  className,</span>
<span class="token plain-text">  children,</span>
<span class="token plain-text">  ...props</span>
<span class="token plain-text">} = {}) </span><span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span>
      <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">classnames</span><span class="token punctuation">(</span>
        styles<span class="token punctuation">[</span><span class="token string">"app-bar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token maybe-class-name">ClassName</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">BorderTopColor</span></span><span class="token punctuation">,</span>
        className
      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>props<span class="token punctuation">}</span></span>
    <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="token plain-text"></span>
<span class="token plain-text">export default AppBar;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> shallow <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"enzyme"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> expect <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"chai"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">AppBar</span></span> <span class="token keyword module">from</span> <span class="token string">"../ui.desktop"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"ShareWebUI"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"AppBar@desktop"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"#render"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"默认渲染"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">AppBar</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"正确渲染子节点"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">AppBar</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">test</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">AppBar</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token method function property-access">contains</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">test</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"允许设置ClassName"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">AppBar</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token method function property-access">hasClass</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"允许设置其他自定义props"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">AppBar</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token method function property-access">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token method function property-access">include</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>Full Rendering</p>
<p>渲染组件真实的 Dom 结构，如果需要测试原生事件，则必须使用这种渲染方式。</p>
</li>
<li>
<p>Static Rendering</p>
<p>类似于爬虫拿到的结果，拿到页面的 HTML 字符串，使用<a href="https://github.com/cheeriojs/cheerio">Cheerio</a>进行操作。</p>
</li>
</ul>
<blockquote>
<p>Enzyme 的浅渲染模式下的事件模拟并非是真的事件触发，实际上它是一种“障眼法”实现，例如 buttonWrapper.simulate('click')只是简单了调用传给 Button 组件的 onClick 参数的那个函数而已。</p>
<p>具体描述：http://airbnb.io/enzyme/docs/future.html</p>
<p>Enzyme 的很多坑：http://airbnb.io/enzyme/docs/guides/migration-from-2-to-3.html</p>
<p>如果在异步操作中调用 setState(),则测试时需要在下一个时钟周期中进行断言（类似的问题较多）：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">/* 模拟点击 */
wrapper.find(&#x26;#39;UIIcon&#x26;#39;).simulate(&#x26;#39;click&#x26;#39;)
expect(wrapper.state(&#x26;#39;loadStatus&#x26;#39;)).to.equal(1) // 点击立即改变加载状态为正在加载
/* 在promise.then 中设置setState,因此需要在下一个时钟进行断言 */
setTimeout(() =&#x26;gt; {
    expect(wrapper.state(&#x26;#39;loadStatus&#x26;#39;)).to.equal(2)
    done()
}, 0)</code></pre></div>
</blockquote>
<h4>集成测试（Integration Testing）</h4>
<p>集成测试是指在单元测试的基础上，将已测试过的单元测试函数进行组合集成暴露出的高层函数或类的封装，对这些函数或类进行的测试。</p>
<p>集成测试最大的难点就是颗粒度较大，逻辑更加复杂，外部因素更多，无法保证测试的可控和独立性。解决方式是使用测试桩（测试替身），即将调用的子函数或模块替换掉，即可以隐藏子模块的细节并且可以控制子模块的行为以达到预期的测试。（这里的前提是子模块已经经过完整的单元测试进行覆盖，因此可以假定为子模块状态可知。）</p>
<p>Typescript 编译成 Commonjs：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// 编译前</span>
<span class="token keyword module">import</span> <span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token constant">B</span> <span class="token keyword module">from</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> fn <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"C"</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">B</span><span class="token punctuation">.</span><span class="token property-access">fn</span><span class="token punctuation">.</span><span class="token method function property-access">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fn<span class="token punctuation">.</span><span class="token method function property-access">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword">class</span> <span class="token class-name">A1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 编译后</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C_1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">"use strict"</span><span class="token punctuation">;</span>
  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">B</span><span class="token punctuation">.</span><span class="token property-access">fn</span><span class="token punctuation">.</span><span class="token method function property-access">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">C_1</span><span class="token punctuation">.</span><span class="token property-access">fn</span><span class="token punctuation">.</span><span class="token method function property-access">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  exports<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token constant">A1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword control-flow">return</span> <span class="token constant">A1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span><span class="token constant">A1</span> <span class="token operator">=</span> <span class="token constant">A1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>导出的所有函数和类都在 exports 对象下，由于在调用时其实是调用的 exports.exportName,如果希望 Stub 则需要 Stub exports 下的属性即可，Sinon 提供的 stub 功能允许我们修改一个对象下的任意属性，注意必须是在一个对象下，也就是说不能直接<code>sinon.stub(fn)</code>，只能<code>sinon.stub(obj,'fnName')</code>。而在 ES6 中可以通过<code>import * as moduleName from ‘moduleName ’</code> 将整个模块导出到单个对象上，就可以解决 Stub 的问题。</p>
<p>考虑有下面的模块依赖：</p>
<p><img src="http://ow67vzejn.bkt.clouddn.com/18-6-15/95861106.jpg" alt=""></p>
<p>其中模块 A 依赖模块 B 和 C，模块 B 又依赖模块 C，这种情况下我们可以选择只 Stub 模块 C，这时候在模块 B 中的 C 模块也同样会被 Stub 影响，最好的方式是同时 Stub 模块 B 和模块 C。</p>
<h5>煎蛋的栗子</h5>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> clientAPI <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'../../../clientapi/clientapi'</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 通过相对路径获取缓存信息
 * <span class="token keyword">@param</span> <span class="token parameter">param0</span> 参数对象
 * <span class="token keyword">@param</span> <span class="token parameter">param0<span class="token punctuation">.</span>relPath</span> 相对路径
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token literal-property property">getInfoByPath</span><span class="token operator">:</span> <span class="token maybe-class-name">Core</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">APIs</span></span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Client</span></span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Cache</span></span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access"><span class="token maybe-class-name">GetInfoByPath</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> relPath <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token function">clientAPI</span><span class="token punctuation">(</span><span class="token string">'cache'</span><span class="token punctuation">,</span> <span class="token string">'GetInfoByPath'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> relPath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> expect <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'chai'</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> stub <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'sinon'</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> clientapi</span> <span class="token keyword module">from</span> <span class="token string">'../../../clientapi/clientapi'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getInfoByPath<span class="token punctuation">,</span> getUnsyncLog<span class="token punctuation">,</span> getUnsyncLogNum <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'./cache'</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'cache'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token string">'stub'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">stub</span><span class="token punctuation">(</span>clientapi<span class="token punctuation">,</span> <span class="token string">'clientAPI'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token string">'restore'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        clientapi<span class="token punctuation">.</span><span class="token property-access">clientAPI</span><span class="token punctuation">.</span><span class="token method function property-access">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'通过相对路径获取缓存信息#getInfoByPath'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">getInfoByPath</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">relPath</span><span class="token operator">:</span> <span class="token string">'relPath'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>clientapi<span class="token punctuation">.</span><span class="token property-access">clientAPI</span><span class="token punctuation">.</span><span class="token property-access">args</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token string">'cache'</span><span class="token punctuation">)</span> <span class="token comment">// 请求资源正确</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>clientapi<span class="token punctuation">.</span><span class="token property-access">clientAPI</span><span class="token punctuation">.</span><span class="token property-access">args</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token string">'GetInfoByPath'</span><span class="token punctuation">)</span> <span class="token comment">// 请求方法正确</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>clientapi<span class="token punctuation">.</span><span class="token property-access">clientAPI</span><span class="token punctuation">.</span><span class="token property-access">args</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">deep</span><span class="token punctuation">.</span><span class="token method function property-access">equal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">relPath</span><span class="token operator">:</span> <span class="token string">'relPath'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 请求体正确</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>）

</code></pre></div>
<p>或者使用 Sinon 提供的 Sandbox，在 restore 时更加简单，不需要单独 restore 每一个被 Stub 的对象。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> rsaEncrypt <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'../../util/rsa/rsa'</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getNew<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'../apis/eachttp/auth1/auth1'</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 认证用户
 * <span class="token keyword">@param</span> <span class="token parameter">account</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">password</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span>
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">account</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">ostype</span><span class="token operator">:</span> number<span class="token punctuation">,</span> vcodeinfo<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">Core</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">APIs</span></span><span class="token punctuation">.</span><span class="token constant">EACHTTP</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Auth1</span></span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">VcodeInfo</span></span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">Core</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">APIs</span></span><span class="token punctuation">.</span><span class="token constant">EACHTTP</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">AuthInfo</span></span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token function">getNew</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        account<span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">deviceinfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">ostype</span><span class="token operator">:</span> ostype
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        vcodeinfo
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ↑↑↑↑被测函数↑↑↑↑ */</span>
<span class="token comment">/* ↓↓↓↓测试代码↓↓↓↓ */</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> createSandbox <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'sinon'</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> auth1</span> <span class="token keyword module">from</span> <span class="token string">'../apis/eachttp/auth1/auth1'</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> rsa</span> <span class="token keyword module">from</span> <span class="token string">'../../util/rsa/rsa'</span>
<span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token function">createSandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token string">'stub'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>
        sandbox<span class="token punctuation">.</span><span class="token method function property-access">stub</span><span class="token punctuation">(</span>rsa<span class="token punctuation">,</span><span class="token string">'rsaEncrypt'</span><span class="token punctuation">)</span>
        sandbox<span class="token punctuation">.</span><span class="token method function property-access">stub</span><span class="token punctuation">(</span>auth1<span class="token punctuation">,</span><span class="token string">'getNew'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token string">'restore'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token arrow operator">=></span><span class="token punctuation">{</span>
        sandbox<span class="token punctuation">.</span><span class="token method function property-access">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'认证用户#auth'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">'account'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">uuid</span><span class="token operator">:</span> <span class="token string">'12140661-e35b-4551-84cf-ce0e513d1596'</span><span class="token punctuation">,</span> <span class="token literal-property property">vcode</span><span class="token operator">:</span> <span class="token string">'1abc'</span><span class="token punctuation">,</span> <span class="token literal-property property">ismodif</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        rsa<span class="token punctuation">.</span><span class="token property-access">rsaEncrypt</span><span class="token punctuation">.</span><span class="token method function property-access">returns</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">// 控制返回值</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span><span class="token property-access">rsaEncrypt</span><span class="token punctuation">.</span><span class="token method function property-access">calledWith</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>auth1<span class="token punctuation">.</span><span class="token property-access">getNew</span><span class="token punctuation">.</span><span class="token method function property-access">calledWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">account</span><span class="token operator">:</span> <span class="token string">'account'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">deviceinfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">ostype</span><span class="token operator">:</span> <span class="token number">1</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">vcodeinfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">uuid</span><span class="token operator">:</span> <span class="token string">'12140661-e35b-4551-84cf-ce0e513d1596'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">vcode</span><span class="token operator">:</span> <span class="token string">'1abc'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">ismodif</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">to</span><span class="token punctuation">.</span><span class="token property-access">be</span><span class="token punctuation">.</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<blockquote>
<p>参考文档：</p>
<ul>
<li><a href="http://sinonjs.org/releases/v6.0.0/stubs/">Stubs - Sinon.JS</a> Stub 的相关概念和使用</li>
<li><a href="http://sinonjs.org/releases/v6.0.0/sandbox/">Sandboxes - Sinon.JS</a> Sandbox（沙盒）的相关概念和使用</li>
</ul>
</blockquote>
<h4>端到端测试（E2E Testing）</h4>
<p>端到端测试是最顶层的测试，即完全作为一个用户一样将程序作为一个完全的黑盒，打开应用程序模拟输入，检查功能以及界面是否正确。</p>
<p>端到端测试需要解决的一些问题：</p>
<ul>
<li>
<p>环境问题</p>
<p>即如何保证每次执行测试前的环境是“干净的”，比如需要检查列表为空的表现，如果上一次测试新增了列表，则后一次测试将无法得到列表为空的状态。</p>
<p>最简单的解决方式是在所有测试执行前或测试执行后调用外部脚本清除数据库等，或者可以通过拦截请求并自定义响应的方式来解决（这样会导致测试复杂度变高，并且不够”真实“）。</p>
</li>
<li>
<p>元素查找</p>
<p>如果代码经常变动，组件结构经常变化，如果根据 DOM 结构来查找操作元素，那么你将陷入维护选择器的地狱中。最佳实践是使用 test-id 的方式，但是这种方式需要开发人员和测试人员配合，在可操作元素上定义语义化的 test-id。</p>
</li>
<li>
<p>操作等待</p>
<p>诸如异步网络请求导致界面变化，或界面动画等，将使得获取操作元素的时机未知。解决方案持续等待直到监听的请求完成，期望的元素成功获取到。</p>
</li>
<li>
<p>使用操作而不是断言</p>
<p>应该更多的依赖操作，而不是依赖断言。例如如果某个操作依赖元素 A 存在，你不需要"判断元素 A 在页面中是否存在"，而应该去"直接获取元素 A，并操作"，因为如果元素 A 不存在，那么肯定将获取不到，断言后的操作将没有意义，因此可以直接使用操作取代断言等待功能。</p>
</li>
</ul>
<blockquote>
<p>参考端到端测试文档</p>
</blockquote>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stroybook]]></title>
        <id>https://jiangwenyang.com/posts/Stroybook</id>
        <link href="https://jiangwenyang.com/posts/Stroybook"/>
        <updated>2018-03-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Storybook是一个可视化的UI 开发环境，本文简单介绍如何进行搭建它并进行使用]]></summary>
        <content type="html"><![CDATA[<h2>什么是 Storybook?</h2>
<p>Stroybook 是一个可视化的 UI 开发环境，通过 Stroybook 你能快速的渲染展示 UI 组件，将 UI 组件与项目隔离，并且通过提供的丰富的插件来提升开发体验。</p>
<h2>使用 Strorybook</h2>
<p>Stroybook 不仅仅可以应用于 React 项目，同时也支持 Vue 和 Angular，由于目前项目使用 React，并且 Storybook 对 React 的支持度更好，因此在此只介绍 Stroybook for React。</p>
<h3>1. 安装</h3>
<p>安装配置 Storybook 官方提供了两种方式，一种是使用提供的 cli 工具进行快速生成，一种是手动安装配置。推荐自己手动配置安装以熟悉 Storybook。</p>
<h4>1.1 快速生成</h4>
<p>Stroybook 官方提供了快速生成 Stroybook 项目骨架的命令行工具，这个工具可以在已有项目下使用。
在项目根目录下执行一下命令：</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -g @storybook/cli
$ getstorybook
</code></pre></div>
<p>上面的命令将会为你快速生成对应你的项目的 storybook。将会安装对应的依赖，在根目录下创建<code>.storybook</code>配置目录并生成对应的配置文件，创建<code>stories</code>目录并创建默认的<code>stories</code>的 demo</p>
<h4>1.2 自定义配置</h4>
<p>如果不想全局安装命令行工具，并且希望自定义 Stroybook，推荐自定义安装配置 Stroybook。</p>
<ol>
<li>安装<code>@storybook/react</code></li>
</ol>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> -D @storybook/react
</code></pre></div>
<ol start="2">
<li>安装 react，react-dom，babel-core</li>
</ol>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react react-dom
<span class="token function">yarn</span> <span class="token function">add</span> -D babel-core
</code></pre></div>
<blockquote>
<p>Storybook 官方没有给出兼容性列表，但实测无法使用 React 0.14</p>
</blockquote>
<ol start="3">
<li>添加 NPM script
编辑<code>package.json</code>，添加启动 Storybook 的 script 字段</li>
</ol>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"storybook"</span><span class="token operator">:</span> <span class="token string">"start-storybook -p 9001 -c .storybook"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<blockquote>
<p><code>-c</code> 参数后跟配置文件所处目录，不使用<code>-c</code>时将默认使用<code>.storybook</code>目录下的配置文件<code>config.js</code></p>
</blockquote>
<h3>2. 配置</h3>
<blockquote>
<p>如果使用快速生成则下面这些配置文件已经帮你生成好了无需再自己配置。</p>
</blockquote>
<p>在根目录下创建<code>.storybook</code>文件夹，然后在该目录下创建<code>config.js</code>文件。
最简单的配置：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> configure <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loadStories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../stories/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// You can require as many stories as you need.</span>
<span class="token punctuation">}</span>

<span class="token function">configure</span><span class="token punctuation">(</span>loadStories<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>上面的配置文件将会使用<code>stories/index.js</code>中的 stories，如果你有多个 stories，每次写 stories 的时候需要对应的进行 require，比较繁琐。如果使用 Webpack，可以使用 Webpack 的<a href="https://webpack.js.org/guides/dependency-management/">require.context</a>语法：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> configure <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loadStories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> storiesContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">"../src"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>stories<span class="token special-escape escape">\.</span>tsx<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  storiesContext<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>storiesContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将会加载src所有子目录下的以.stories.tsx结尾的模块</span>
  <span class="token comment">// You can require as many stories as you need.</span>
<span class="token punctuation">}</span>

<span class="token function">configure</span><span class="token punctuation">(</span>loadStories<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>3. 写 stories</h3>
<p>在组件目录下新建对应 stories 文件，例如在 Button 组件目录下新建<code>stories/Button.stories.tsx</code></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> storiesOf <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> action <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-actions"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Button</span></span> <span class="token keyword module">from</span> <span class="token string">"../ui.desktop.tsx"</span><span class="token punctuation">;</span>

<span class="token function">storiesOf</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"with text"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Button</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Hello</span> <span class="token maybe-class-name">Button</span><span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"with some emoji"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Button</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>😀 😎 👍 💯<span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>然后执行<code>npm run storybook</code>或者<code>yarn storybook</code>打开<a href="localhost:9001">localhost:9001</a>将看到类似下面这样的界面
<img src="http://ow67vzejn.bkt.clouddn.com/18-1-31/1015387.jpg" alt=""></p>
<h3>4. 使用 addon</h3>
<p>Storybook 通过插件的方式使用额外的功能，主要有两种插件：
<strong>Decorators 类装饰器插件</strong>
Decorators 插件又分为两种:</p>
<ol>
<li>Wrapper Components
就是普通的 react 容器组件，简单的将你需要 story 的组件包裹在其中。</li>
</ol>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Center</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token operator">&#x3C;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
</code></pre></div>
<ol start="2">
<li>Storybook Decorators
扩展一个函数作为 storybook decorator。</li>
</ol>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> storiesOf <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> action <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-actions"</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Button</span></span> <span class="token keyword module">from</span> <span class="token string">"./button"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">CenterDecorator</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">storyFn</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token operator">&#x3C;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">storyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token function">storiesOf</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">addDecorator</span><span class="token punctuation">(</span><span class="token maybe-class-name">CenterDecorator</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"with text"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Button</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Hello</span> <span class="token maybe-class-name">Button</span><span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">"with some emojies"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Button</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>😀 😎 👍 💯<span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<blockquote>
<p>使用<code>.addDecorator(Decorator)</code>语法代码更加简洁,如果要使用全局的 Decorator 可以在<code>config.js</code>中配置全局的<code>Decorator</code>，将会应用到所有的 stories</p>
</blockquote>
<p>例如需要居中显示所有的 stories：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> configure<span class="token punctuation">,</span> addDecorator<span class="token punctuation">,</span> setAddon <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>
<span class="token function">addDecorator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stories</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&#x3C;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">"center"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">stories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Native Addons 原生插件</strong>
原生插件能在包裹 stories 之前提供基于 Storybook 平台的额外特性，例如 storybook-actions 插件。</p>
<p>使用这两种插件前，我们都需要先在<code>.storybook</code>目录下新建<code>addons.js</code>来注册对应的插件</p>
<div class="remark-highlight"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">"@storybook/addon-actions/register"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"@storybook/addon-links/register"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"@storybook/addon-notes/register"</span><span class="token punctuation">;</span>
</code></pre></div>
<p>插件的具体使用配置需要查看插件自己的文档。</p>
<h3>5. 自定义 Webpack 配置</h3>
<p>当使用 storybook 时，Storybook 将会使用自己默认的 webpack 配置,使用的是 create-react-app 的 webpack 配置，一般而言适用于绝大多数项目。如果想自定义 webpack 有下面几种方式：
<strong>Extend Mode (扩展模式)</strong>
在<code>.storybook</code>目录下新建文件<code>webpack.config.js</code>，导出一个<strong>object</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>scss<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"sass-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>扩展模式下可以更改除：</p>
<ul>
<li>entry</li>
<li>output</li>
<li>js loader with babel</li>
</ul>
<p>这几项外所有的 webpack 配置项，Storybook 将会将你的自定义配置项作为默认配置的扩展来启动 webpack。</p>
<p><strong>Full Control Mode (完全控制模式)</strong>
通过导出一个函数，函数接受两个参数 storybookBaseConfig 和 configType，一个是 Storybook 的基础配置对象，一个是当前的环境（'DEVELOPMENT' or 'PRODUCTION'），然后通过修改 storybookBaseConfig 后返回自定义的配置对象达到完全控制的目的。
官方的 DMEO：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Export a function. Accept the base config as the only param.</span>
module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">storybookBaseConfig<span class="token punctuation">,</span> configType</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// configType has a value of 'DEVELOPMENT' or 'PRODUCTION'</span>
  <span class="token comment">// You can change the configuration based on that.</span>
  <span class="token comment">// 'PRODUCTION' is used when building the static version of storybook.</span>

  <span class="token comment">// Make whatever fine-grained changes you need</span>
  storybookBaseConfig<span class="token punctuation">.</span><span class="token property-access">module</span><span class="token punctuation">.</span><span class="token property-access">rules</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>scss<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"sass-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the altered config</span>
  <span class="token keyword control-flow">return</span> storybookBaseConfig<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>尽量不要去更改下面这几项：</p>
<ul>
<li>entry</li>
<li>output</li>
<li>first loader in the module.loaders (Babel loader for JS)</li>
<li>all existing plugins</li>
</ul>
<p><strong>Full control mode + default （完全控制+默认配置 模式）</strong>
和完全配置模式几乎一样，唯一的区别是导出的函数多了一个参数 defaultConfig，当导出的函数有三个参数时将会使用这种模式。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">baseConfig<span class="token punctuation">,</span> env<span class="token punctuation">,</span> defaultConfig</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Extend defaultConfig as you need.</span>

  <span class="token comment">// For example, add typescript loader:</span>
  defaultConfig<span class="token punctuation">.</span><span class="token property-access">module</span><span class="token punctuation">.</span><span class="token property-access">rules</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span><span class="token group punctuation">(</span>ts<span class="token alternation keyword">|</span>tsx<span class="token group punctuation">)</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token string">"ts-loader"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  defaultConfig<span class="token punctuation">.</span><span class="token property-access">resolve</span><span class="token punctuation">.</span><span class="token property-access">extensions</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> defaultConfig<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<blockquote>
<p>建议使用扩展模式，配置比较简单。如果需要根据不同的环境进行不同的编译配置，使用全控制模式配置。
Storybook 的基础配置中只包含了 babel-loader 和 md 解析用的 loader，默认配置中配置了例如 css、json、字体文件、媒体文件相关的 loader，可以在 node_modules@storybook\react\src\server\config 下看到对应的 webpack 配置文件。</p>
</blockquote>
<h3>6. 注入 script 或 css</h3>
<p>如果你的 UI 库依赖全局的 script 或者 css，可以通过 Storybook 提供的注入的方式。</p>
<ol>
<li>组件预览 iframe 注入
在<code>./stroybook</code>目录下新建<code>preview-head.html</code>,里面的 srcipt 或 css 标签将注入到预览区域的 iframe 中，在 stries 加载前被注入。
例如希望每个 UI 组件使用 reset.css
在<code>preview-head.html</code>中添加</li>
</ol>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">&#x3C;</span>style<span class="token operator">></span>
<span class="token operator">*</span><span class="token punctuation">{</span>
	<span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&#x3C;</span><span class="token operator">/</span>style<span class="token operator">></span>
</code></pre></div>
<ol start="2">
<li>Stroybook 平台注入
在<code>./stroybook</code>目录下新建<code>manager-head.html</code>,里面的 script 或 css 标签将注入到 Stroybook 平台下，将在 Stroybook React UI 加载前被注入。</li>
</ol>
<h2>配置参考</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> configure<span class="token punctuation">,</span> addDecorator<span class="token punctuation">,</span> setAddon <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>

<span class="token comment">/* 导入storybook插件 */</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> setOptions <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-options"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">JSXAddon</span></span> <span class="token keyword module">from</span> <span class="token string">"storybook-addon-jsx"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> withKnobs <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-knobs/react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> withDocs <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"storybook-readme"</span><span class="token punctuation">;</span>

<span class="token comment">/* 通用storybook底部md */</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">Doc_Footer</span></span> <span class="token keyword module">from</span> <span class="token string">"./Doc_Footer.md"</span><span class="token punctuation">;</span>

<span class="token comment">/* 设置Storybook UI */</span>
<span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"AnyShare"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"https://anyshare.eisoo.com"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">goFullScreen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showLeftPanel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showDownPanel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showSearchBox</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">downPanelInRight</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 设置使用JSXAddon，在侧边栏显示渲染区域组件对应的JSX */</span>
<span class="token function">setAddon</span><span class="token punctuation">(</span><span class="token maybe-class-name">JSXAddon</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

withDocs<span class="token punctuation">.</span><span class="token method function property-access">addFooterDocs</span><span class="token punctuation">(</span><span class="token maybe-class-name">Doc_Footer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当使用withDocs时，使用通用底部md</span>

<span class="token comment">/* 全局story装饰器 */</span>
<span class="token function">addDecorator</span><span class="token punctuation">(</span>withKnobs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用addon-knobs装饰器，允许自定义组件参数，具体参数需要在story中定义</span>

<span class="token comment">/* 加载story */</span>
<span class="token keyword">function</span> <span class="token function">loadStories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> storiesContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">"../src"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>stories<span class="token special-escape escape">\.</span>tsx<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  storiesContext<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>storiesContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">configure</span><span class="token punctuation">(</span>loadStories<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>ShareWebUI/.sotrybook/addon.js --- Storybook 注册插件配置文件</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token string">"@storybook/addon-options/register"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token string">"@storybook/addon-actions/register"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token string">"@storybook/addon-links/register"</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token string">"@storybook/addon-knobs/register"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token string">"storybook-addon-jsx/register"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token string">"storybook-readme/register"</span><span class="token punctuation">;</span>
</code></pre></div>
<p>ShareWebUI/.storybook/webpack.config.js --- 自定义 webpack 配置</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token maybe-class-name">ExtractTextPlugin</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>tsx<span class="token quantifier number">?</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>json<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"json-loader"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>css<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token maybe-class-name">ExtractTextPlugin</span><span class="token punctuation">.</span><span class="token method function property-access">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>
              <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token literal-property property">localIdentName</span><span class="token operator">:</span> <span class="token string">"[path][name]---[local]"</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>
              <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../../postcss.config.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>png<span class="token anchor function">$</span><span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>gif<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span><span class="token group punctuation">(</span>eot<span class="token alternation keyword">|</span>otf<span class="token alternation keyword">|</span>webp<span class="token alternation keyword">|</span>svg<span class="token alternation keyword">|</span>ttf<span class="token alternation keyword">|</span>woff<span class="token alternation keyword">|</span>woff2<span class="token group punctuation">)</span><span class="token group punctuation">(</span><span class="token special-escape escape">\?</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"base64-font-loader"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"assets/fonts/[name].[ext]"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>swf<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">/* 使用storybook的默认md配置 */</span>
      <span class="token comment">// {</span>
      <span class="token comment">//     test: /\.md$/,</span>
      <span class="token comment">//     use: [{</span>
      <span class="token comment">//             loader: 'html-loader',</span>
      <span class="token comment">//         },</span>
      <span class="token comment">//         {</span>
      <span class="token comment">//             loader: 'markdown-loader',</span>
      <span class="token comment">//         },</span>
      <span class="token comment">//     ],</span>
      <span class="token comment">// },</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].css"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allChunks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>ShareWebUI/src/Button/stories/Button.stroies.tsx --- stories 文件</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> storiesOf <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> action <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-actions"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>
  object<span class="token punctuation">,</span>
  number<span class="token punctuation">,</span>
  text<span class="token punctuation">,</span>
  boolean<span class="token punctuation">,</span>
  select<span class="token punctuation">,</span>
<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"@storybook/addon-knobs/react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> withReadme<span class="token punctuation">,</span> withDocs <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"storybook-readme"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">ReadmeDoc</span></span> <span class="token keyword module">from</span> <span class="token string">"../document/Button.md"</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Button</span></span> <span class="token keyword module">from</span> <span class="token string">"../ui.desktop"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> typeOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token string">"button"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">submit</span><span class="token operator">:</span> <span class="token string">"submit"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">reset</span><span class="token operator">:</span> <span class="token string">"reset"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">regular</span><span class="token operator">:</span> <span class="token string">"regular"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dark</span><span class="token operator">:</span> <span class="token string">"dark"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">storiesOf</span><span class="token punctuation">(</span><span class="token string">"Button@desktop"</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">addDecorator</span><span class="token punctuation">(</span><span class="token function">withDocs</span><span class="token punctuation">(</span><span class="token maybe-class-name">ReadmeDoc</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">addDecorator</span><span class="token punctuation">(</span><span class="token function">withReadme</span><span class="token punctuation">(</span><span class="token maybe-class-name">ReadmeDoc</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">addWithJSX</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Button</span>
      type<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> typeOptions<span class="token punctuation">,</span> <span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">,</span> theme<span class="token punctuation">,</span> <span class="token string">"regular"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"button-click"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      code<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">,</span> <span class="token string">"\uf077"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      minWidth<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token string">"minWidth"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      onMouseDown<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"onMouseDown"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      onMount<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">"onMount"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">></span>
      <span class="token punctuation">{</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>ShareWebUI/src/Button/ui.desktop.tsx --- 对应的 Button 组件</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> <span class="token maybe-class-name">React</span></span> <span class="token keyword module">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> noop <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"lodash"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> classnames</span> <span class="token keyword module">from</span> <span class="token string">"classnames"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">UIIcon</span></span> <span class="token keyword module">from</span> <span class="token string">"../UIIcon/ui.desktop"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> styles</span> <span class="token keyword module">from</span> <span class="token string">"./styles.desktop.css"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">Button</span><span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">StatelessComponent</span></span><span class="token operator">&#x3C;</span><span class="token constant">UI</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Props</span></span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  type <span class="token operator">=</span> <span class="token string">"button"</span><span class="token punctuation">,</span>
  disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  theme <span class="token operator">=</span> <span class="token string">"regular"</span><span class="token punctuation">,</span>
  icon<span class="token punctuation">,</span>
  minWidth<span class="token punctuation">,</span>
  width<span class="token punctuation">,</span>
  className<span class="token punctuation">,</span>
  onClick <span class="token operator">=</span> noop<span class="token punctuation">,</span>
  onMouseDown <span class="token operator">=</span> noop<span class="token punctuation">,</span>
  onMount <span class="token operator">=</span> noop<span class="token punctuation">,</span>
  children<span class="token punctuation">,</span>
  fallback<span class="token punctuation">,</span>
  <span class="token spread operator">...</span>otherProps
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&#x3C;</span>button
      type<span class="token operator">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span>
      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> minWidth<span class="token punctuation">,</span> width <span class="token punctuation">}</span><span class="token punctuation">}</span>
      disabled<span class="token operator">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span>
      className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">classnames</span><span class="token punctuation">(</span>styles<span class="token punctuation">[</span><span class="token string">"button"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> styles<span class="token punctuation">[</span>theme<span class="token punctuation">]</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>styles<span class="token punctuation">[</span><span class="token string">"disabled"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> disabled<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token operator">!</span>disabled <span class="token operator">&#x26;&#x26;</span> <span class="token function">onClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span>
      onMouseDown<span class="token operator">=</span><span class="token punctuation">{</span>onMouseDown<span class="token punctuation">}</span>
      ref<span class="token operator">=</span><span class="token punctuation">{</span>onMount<span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token spread operator">...</span>otherProps<span class="token punctuation">}</span>
    <span class="token operator">></span>
      <span class="token punctuation">{</span>icon <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&#x3C;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token string">"icon"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token operator">&#x3C;</span><span class="token maybe-class-name">UIIcon</span>
            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span>
            code<span class="token operator">=</span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span>
            fallback<span class="token operator">=</span><span class="token punctuation">{</span>fallback<span class="token punctuation">}</span>
            color<span class="token operator">=</span><span class="token punctuation">{</span>theme <span class="token operator">===</span> <span class="token string">"dark"</span> <span class="token operator">?</span> <span class="token string">"#fff"</span> <span class="token operator">:</span> <span class="token string">"#757575"</span><span class="token punctuation">}</span>
          <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&#x3C;</span><span class="token operator">/</span>span<span class="token operator">></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">}</span>
      <span class="token operator">&#x3C;</span>span<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>span<span class="token operator">></span>
    <span class="token operator">&#x3C;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">Button</span><span class="token punctuation">;</span>
</code></pre></div>
<p>参考文档：</p>
<ul>
<li><a href="https://storybook.js.org/basics/introduction/">Storybook 官方配置文档</a></li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/actions">插件 Action 配置文档</a></li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/knobs">插件 Knobs 配置文档</a></li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/options">插件 Options 配置文档</a></li>
<li><a href="https://github.com/tuchk4/storybook-readme">插件 Readme 配置文档</a></li>
<li><a href="https://github.com/storybooks/addon-jsx">插件 JSX preview 配置文档</a></li>
</ul>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Hooks]]></title>
        <id>https://jiangwenyang.com/posts/Git Hooks</id>
        <link href="https://jiangwenyang.com/posts/Git Hooks"/>
        <updated>2018-03-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[介绍Git Hooks是什么，以及如何使用]]></summary>
        <content type="html"><![CDATA[<h2>什么是 Git Hooks</h2>
<p>Git Hooks（Git 钩子）是 Git 提供的当特定动作如提交、推送等 Git 行为发生时执行的自定义脚本。主要分为客户端脚本和服务器端脚本。</p>
<h3>Git Hooks 的安装</h3>
<p>其实当初始化一个 Git 项目的时候，hooks 就已经被安装到项目中，只是默认未启用。当执行<code>git init</code>的时候，Git 会初始化示例脚本到<code>.git/hooks</code>目录中。</p>
<p>如果想启用这些 hooks 非常简单，只需要去掉<code>.sample</code>后缀即可启用。示例代码是使用 shell 编写的,但是 git 并没没有显示编写 hooks 使用的语言,任何可执行脚本都可以使用。</p>
<blockquote>
<p><code>.git</code>目录无法加入到版本控制中，因为每次 clone 一个新的仓库的时候都会新生成<code>.git</code>目录。</p>
<p>由于这个特性，因此只能将 hooks 存储到其他目录，通过软链接或者手动拷贝的方式拷贝到<code>.git/hooks</code>目录下，但是这样的问题是当更新或新增 hooks 脚本的时候需要重新建立与<code>.git/hooks</code>的关系。</p>
</blockquote>
<h3>客户端钩子</h3>
<p>客户端钩子主要有提交工作流钩子、电子邮件工作流钩子和其它钩子。</p>
<p>| 钩子类型           | 钩子名称           | 触发时机                                                                                           | 钩子参数                  | 可中止 |
| ------------------ | ------------------ | -------------------------------------------------------------------------------------------------- | ------------------------- | ------ |
| 提交工作流钩子     | pre-commit         | 键入提交信息前，即生成本次 commit 对象前。是代码检查、测试运行的好时机。                           | \                         | 是     |
| 提交工作流钩子     | prepare-commit-msg | 启动提交信息编辑器之前，默认信息被创建之后运行。可以在这里修改默认提交信息。                       | filepath commitType SHA-1 | 是     |
| 提交工作流钩子     | commit-msg         | 输入提交信息后，执行提交前发生。可以在这里检查提交信息是否规范，也可以修改提交信息。               | filepath                  | 是     |
| 提交工作流钩子     | post-commit        | 整个提交完成后。一般用于发生通知，例如邮件通知提交等（但是建议在服务器端 post-receive 钩子中做）。 | \                         | 否     |
| 电子邮件工作流钩子 | applypatch-msg     | 生成补丁提交信息后，应用补丁前。可用来检查补丁提交信息是否规范。                                   | mergeFilename             | 是     |
| 电子邮件工作流钩子 | pre-applypatch     | 运行于应用补丁后，产生提交对象之前。因此和 pre-commit 一样是代码检查、测试运行的好时机。           | \                         | 是     |
| 电子邮件工作流钩子 | post-applypatch    | 整个提交完成后。同 post-commit 一样是通知的好时机。                                                | \                         | 否     |
| 其它客户端钩子     | pre-rebase         | 运行于变基前。                                                                                     | \                         | 是     |
| 其它客户端钩子     | post-rewrite       | 被会替换提交记录的命令所触发。如<code>git commit --amend</code>                                               | commandName               | 否     |
| 其它客户端钩子     | post-checkout      | 在 git checkout 成功运行后。                                                                       | commandName               | 否     |
| 其它客户端钩子     | post-merge         | 在 git merge 成功运行后。                                                                          | commandName               | 否     |
| 其它客户端钩子     | pre-push           | 更新了远程引用但是未推送本地提交前。                                                               | originBranchName HEAD     | 是     |</p>
<p>参考：</p>
<ul>
<li>可中止：钩子以非 0 结束码退出则中止 Git 操作，以 0 结束码退出则正常执行 Git 操作，后面的服务器端钩子同理。</li>
</ul>
<ul>
<li>filepath：提交信息存储文件路径<code>.git/COMMIT_EDITMSG</code>。</li>
<li>commitType：提交类型，使用<code>git commit</code>提交时为空，使用<code>git commit -m</code>提交时为<code>message</code>，使用<code>git commit -c</code>提交时为<code>commit</code>，可以通过<code>git commit -h</code>查看对应的提交类型。</li>
<li>SHA-1：关联的提交的哈希字符串，例如使用 git commit --amend 提交时为上一次提交的哈希。</li>
<li>mergeFilename：请求合并信息的临时文件的名字。</li>
<li>commandName：触发的命令名。</li>
<li>originBranchName ： 远程分支名。</li>
<li>HEAD：本地分支最新提交的引用。</li>
</ul>
<blockquote>
<p>提交工作流钩子是一般我们常用到的，电子邮件工作流只会在通过电子邮件推送代码的工作流中会用到。</p>
</blockquote>
<h3>服务器端钩子</h3>
<p>服务器端钩子主要在推送到达到服务器之前和之后触发。</p>
<p>| 钩子类型     | 钩子名称     | 触发时机                                                                                            | 钩子参数                       | 可终止 |
| ------------ | ------------ | --------------------------------------------------------------------------------------------------- | ------------------------------ | ------ |
| 服务器端钩子 | pre-receive  | 客户端推送到达前，非 0 值退出则拒绝                                                                 | pushRef                        | 是     |
| 服务器端钩子 | update       | 和 pre-receive，区别时如果提交包含多个分支，则会在每个分支都运行一次，而 pre-receive 只会运行一次。 | branchName lastSHA-1 thisSHA-1 | 是     |
| 服务器端钩子 | post-receive | 推送完成后。常用于邮件通知，持续集成。                                                              | pushRef                        | 否     |</p>
<p>参数解释：</p>
<ul>
<li>pushRef：推送的引用。</li>
<li>branchName：引用的名字（分支）。</li>
<li>lastSHA-1：推送前的引用指向的内容的 SHA-1 值</li>
<li>thisSHA-1：用户本次推送的内容的 SHA-1 值</li>
</ul>
<h3>使用 husky</h3>
<p><a href="https://github.com/typicode/husky">husky</a>是一个 npm 包，让你可以更加简单的管理 hooks。</p>
<h4>husky 安装</h4>
<p>> v0.14: <code>yarn add -D husky@next</code></p>
<p>&#x3C;=0.14: <code>yarn add -D husky</code></p>
<h4>husky 使用</h4>
<p>husky 使用比较简单，支持所有的客户端 hooks。</p>
<blockquote>
<p>husky 默认情况下 husky 要求<code>package.json</code>和<code>.git</code>在同级目录，但是可以通过配置支持子路径。</p>
</blockquote>
<p>> v0.14:</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"npm test"</span><span class="token punctuation">,</span>
      <span class="token property">"prepare-commit-msg"</span><span class="token operator">:</span> <span class="token string">"node prepare-commit-msg.js ${GIT_PARAMS}"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>&#x3C;=0.14:</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"npm test"</span><span class="token punctuation">,</span>
    <span class="token property">"prepare-commit-msg"</span><span class="token operator">:</span> <span class="token string">"node prepare-commit-msg.js ${GIT_PARAMS}"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<blockquote>
<p>环境变量<code>GIT_PARAMS</code>，是当前钩子接收到的参数使用空格连接而成的字符串。</p>
<p>node.js 中可通过 progress.env.GIT_PARAMS 取得。</p>
</blockquote>
<h4>husky 原理</h4>
<blockquote>
<p>以> 0.14 版本代码为例,老版本同理</p>
</blockquote>
<p>husky 安装的时候会自动在<code>.git/hooks</code>,下生成所有的客户端钩子。每一个钩子的代码完全一样，代码：</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh -e</span>
<span class="token comment"># husky</span>
<span class="token comment"># v0.15.0-rc.8 win32</span>

<span class="token builtin class-name">export</span> <span class="token assign-left variable">GIT_PARAMS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$*</span>"</span>
<span class="token function">node</span> ./node_modules/husky/lib/runner/bin <span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token variable">`</span></span>
</code></pre></div>
<p>上面的代码是一段 shell 脚本，第 5 行将 shell 脚本接收到的所有参数（<code>$*</code>）导出为环境变量<code>GIT_PARAMS</code>。</p>
<p>然后通过 node 执行了<code>./node_modules/husky/lib/runner/bin</code>脚本文件，代码：</p>
<div class="remark-highlight"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">"./"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><code>bin.js</code>使用当前进程的所有命令行参数构成的数组（process.argv）作为参数，调用了 index.js 的默认导出函数，并将函数返回值作为进程结束码*（当钩子允许中止时，结束码为非 0 时将中止当前 Git 操作，为 0 正常退出）*。</p>
<p><em>index.js 代码如下：</em></p>
<div class="remark-highlight"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> cosmiconfig <span class="token keyword">from</span> <span class="token string">"cosmiconfig"</span><span class="token punctuation">;</span> <span class="token comment">// 这一行代码貌似是多余的，后面没用到</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> execa <span class="token keyword">from</span> <span class="token string">"execa"</span><span class="token punctuation">;</span> <span class="token comment">// 第三方包，node.js的child_process的promise封装</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> readPkg <span class="token keyword">from</span> <span class="token string">"read-pkg"</span><span class="token punctuation">;</span> <span class="token comment">// 第三方包，读取package.json并返回配置对象</span>
<span class="token keyword">import</span> getConf <span class="token keyword">from</span> <span class="token string">"../getConf"</span><span class="token punctuation">;</span> <span class="token comment">// 第三方包，通过调用第三方包cosmiconfig读取并返回配置对象</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> hookName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pkg <span class="token operator">=</span> readPkg<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getConf</span><span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> command<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span>
    config <span class="token operator">&#x26;&#x26;</span> config<span class="token punctuation">.</span>hooks <span class="token operator">&#x26;&#x26;</span> config<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>hookName<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> oldCommand<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span>
    pkg <span class="token operator">&#x26;&#x26;</span> pkg<span class="token punctuation">.</span>scripts <span class="token operator">&#x26;&#x26;</span> pkg<span class="token punctuation">.</span>scripts<span class="token punctuation">[</span>hookName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">husky > </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hookName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (node </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      execa<span class="token punctuation">.</span><span class="token function">shellSync</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd<span class="token punctuation">,</span> stdio<span class="token operator">:</span> <span class="token string">"inherit"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Warning: Setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hookName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> script in package.json > scripts will be deprecated in v1.0</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Please move it to husky.hooks in package.json, a .huskyrc file, or a husky.config.js file</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Or run ./node_modules/.bin/husky-upgrade for automatic update</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">See https://github.com/typicode/husky/tree/dev for usage</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">husky > </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hookName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (node </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      execa<span class="token punctuation">.</span><span class="token function">shellSync</span><span class="token punctuation">(</span>oldCommand<span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd<span class="token punctuation">,</span> stdio<span class="token operator">:</span> <span class="token string">"inherit"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> noVerifyMessage <span class="token operator">=</span>
      hookName <span class="token operator">===</span> <span class="token string">"prepare-commit-msg"</span>
        <span class="token operator">?</span> <span class="token string">"(cannot be bypassed with --no-verify due to Git specs)"</span>
        <span class="token operator">:</span> <span class="token string">"(add --no-verify to bypass)"</span><span class="token punctuation">;</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">husky > </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hookName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> hook failed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noVerifyMessage<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>代码比较清晰，即通过参数解构获取到当前的<code>hookName</code>，通过 <code>getConf</code><em>(调用 cosmiconfig 包)</em> 和 <code>read-pkg</code>包从 package.json 中获取 hookName 对应的 hooks 命令，然后通过 execa.shellSync 同步执行获取到的 hook 命令，执行成功返回 0，执行错误返回 1（作为上层<code>bin.js</code>的错误码来结束进程）。</p>
<blockquote>
<p>为什么通过这两个不同的包来获取 package.json 文件中的配置？</p>
<p>从这两个包的区别来看应该是为了在新版本中支持除 package.json 外其他的配置文件中配置 hooks，因为 cosmiconfig 支持除 package.json 文件外其他的配置文件，read-pkg 只支持 package.json。</p>
</blockquote>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Enzyme官方API一览]]></title>
        <id>https://jiangwenyang.com/posts/Enzyme官方API一览</id>
        <link href="https://jiangwenyang.com/posts/Enzyme官方API一览"/>
        <updated>2017-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Enzyme是Airbnb维护的一个React测试套件，简单介绍一下如何使用]]></summary>
        <content type="html"><![CDATA[<h2>Enzyme 官方文档简记</h2>
<p>Enzyme(酶)是一个 Javascript 测试库，提供了类似 Jquery 的简洁灵活的 API 来操作和遍历 DOM。Enzyme 本身不提供测试框架或者断言库功能，只提供了渲染、操作、遍历的功能，可以简单的接入到任意的测试框架以及使用任意的断言库。</p>
<h3>Enzyme 2.x 和 3.x 的重要变动</h3>
<h4>Adapter</h4>
<p>原本使用 2.X 不需要安装额外的库，enzyme 升级到 3.x 后多了一个“Adapter”系统，因此需要额外安装“Adapter”来告诉 enzyme 当前运行的 React 版本，官方提供了 React 0.13.x, 0.14.x, 15.x, and 16.x 的“Adapter”。
目前在项目中使用的是 React 0.14 版本，因此在 enzyme 3.x 下使用 enzyme 需要</p>
<ol>
<li>命令行中安装 enzyme 和 react 0.14 的 adapter</li>
</ol>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D enzyme enzyme-adapter-react-14
</code></pre></div>
<ol start="2">
<li>setup
在使用 enzyme 之前使用顶层 API <code>configure</code>配置适配器，这里也可以设置其他特性，例如禁用 lifecycle</li>
</ol>
<h4>不再保留元素引用</h4>
<p>官方 demo：</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import React from &#x26;quot;react&#x26;quot;;
import Icon from &#x26;quot;./path/to/Icon&#x26;quot;;

const ICONS = {
  success: &#x26;lt;Icon name=&#x26;quot;check-mark&#x26;quot; /&#x26;gt;,
  failure: &#x26;lt;Icon name=&#x26;quot;exclamation-mark&#x26;quot; /&#x26;gt;,
};

const StatusLabel = ({ id, label }) =&#x26;gt; (
  &#x26;lt;div&#x26;gt;
    {ICONS[id]}
    {label}
    {ICONS[id]}
  &#x26;lt;/div&#x26;gt;
);</code></pre></div>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import { shallow } from &#x26;quot;enzyme&#x26;quot;;
import StatusLabel from &#x26;quot;./path/to/StatusLabel&#x26;quot;;
import Icon from &#x26;quot;./path/to/Icon&#x26;quot;;

const wrapper = shallow(&#x26;lt;StatusLabel id=&#x26;quot;success&#x26;quot; label=&#x26;quot;Success&#x26;quot; /&#x26;gt;);

const iconCount = wrapper.find(Icon).length;</code></pre></div>
<p>在 v2.x 中 iconCount 为 1，在 v3.x 中为 2。原因是 v2.x 中找到所有匹配 selector 的元素后将重复的移除了，因此在 v2.x 中返回了一个元素。在 v3.x 中元素会被转换为底层的 react elements，因此具有不同的引用，所以就有 2 个元素返回。</p>
<h4><code>children()</code>方法的变动</h4>
<p>官方 demo：</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">class Box extends React.Component {
  render() {
    return &#x26;lt;div className=&#x26;quot;box&#x26;quot;&#x26;gt;{this.props.children}&#x26;lt;/div&#x26;gt;;
  }
}
class Foo extends React.Component {
  render() {
    return (
      &#x26;lt;Box bam&#x26;gt;
        &#x26;lt;div className=&#x26;quot;div&#x26;quot; /&#x26;gt;
      &#x26;lt;/Box&#x26;gt;
    );
  }
}</code></pre></div>
<p>在使用<code>mount()</code>的时候</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">const wrapper = mount(&#x26;lt;Foo /&#x26;gt;);</code></pre></div>
<p><code>wrapper.find(Box).children()</code>在 v2.x 和 v3.x 下的区别：</p>
<ul>
<li>v2.x 下</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">wrapper.find(Box).children().debug();
// =&#x26;gt; &#x26;lt;div className=&#x26;quot;div&#x26;quot; /&#x26;gt;</code></pre></div>
<ul>
<li>v3.x 下：</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">wrapper.find(Box).children().debug();
// =&#x26;gt;
// &#x26;lt;div className=&#x26;quot;box&#x26;quot;&#x26;gt;
//   &#x26;lt;div className=&#x26;quot;div&#x26;quot; /&#x26;gt;
// &#x26;lt;/div&#x26;gt;</code></pre></div>
<p>两者的主要区别是：v2.x 只会返回 Props.children 的结果，类似于浅渲染，v3.x 会如期望那样返回真实渲染的结果。</p>
<h4>通过组件实例直接调用组件内部方法改变 State 需要<code>update()</code></h4>
<p>官方 demo：</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
  }
  increment() {
    this.setState({ count: this.state.count + 1 });
  }
  decrement() {
    this.setState({ count: this.state.count - 1 });
  }
  render() {
    return (
      &#x26;lt;div&#x26;gt;
        &#x26;lt;div className=&#x26;quot;count&#x26;quot;&#x26;gt;Count: {this.state.count}&#x26;lt;/div&#x26;gt;
        &#x26;lt;button className=&#x26;quot;inc&#x26;quot; onClick={this.increment}&#x26;gt;Increment&#x26;lt;/button&#x26;gt;
        &#x26;lt;button className=&#x26;quot;dec&#x26;quot; onClick={this.decrement}&#x26;gt;Decrement&#x26;lt;/button&#x26;gt;
      &#x26;lt;/div&#x26;gt;
    );
  }
}</code></pre></div>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&#x3C;</span><span class="token maybe-class-name">Counter</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过事件模拟下v2.x和v3.x表现一致都会自动更新状态</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".inc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">simulate</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 1"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".inc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">simulate</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 2"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".dec"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">simulate</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 1"</span>

<span class="token comment">// 调用实例上的方法 v3.x不会自动更新</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0" (would have been "Count: 1" in v2)</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0" (would have been "Count: 2" in v2)</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0" (would have been "Count: 1" in v2)</span>

<span class="token comment">// 在v3.x下需要手动更新</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 0"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 1"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 2"</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">".count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Count: 1"</span>
</code></pre></div>
<h4><code>ref()</code>返回真实的 ref 而不是 wrapper</h4>
<p>在 v2.x 下 ref 返回的是 wrapper 实例，在 v3.x 下和真实的 react 一致，当 ref 定义在 dom 元素上时返回的是 Dom Element，在 React 组件上时返回的是组件的实例。
在 v2.x 下：</p>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Box</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// this is what would happen with enzyme v2</span>
<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token method function property-access">ref</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBeInstanceOf</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>在 v3.x 下:</p>
<ul>
<li>直接定义在 dom 元素上的 ref</li>
</ul>
<div class="remark-highlight"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Box</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// this is what happens with enzyme v3</span>
<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token method function property-access">ref</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBeInstanceOf</span><span class="token punctuation">(</span><span class="token maybe-class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<ul>
<li>定义在 React 元素上的 ref</li>
</ul>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">class Bar extends React.Component {
  render() {
    return &#x26;lt;Box ref=&#x26;quot;abc&#x26;quot; /&#x26;gt;;
  }
}</code></pre></div>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = mount(&#x26;lt;Bar /&#x26;gt;);
expect(wrapper.ref(&#x26;#39;abc&#x26;#39;)).toBeInstanceOf(Box);</code></pre></div>
<h4>在<code>mount</code>下，<code>.instance()</code>可以级联在任何返回的 wrapper 对象上调用</h4>
<p>在 v3.x 下可以在任何返回 wrapper 对象的方法后调用<code>instance()</code>，将会返回组件的实例，因此可以在实例后再调用<code>.setState()</code>，更加灵活。</p>
<h4>在<code>mount</code>下，<code>.getNode()</code>被废弃，使用<code>.instance()</code>代替</h4>
<h4>在<code>shallow</code>下，<code>.getNode()</code>被废弃，使用<code>getElement()</code>代替</h4>
<h4>移除了私有属性和方法</h4>
<ul>
<li><code>.node</code></li>
<li><code>.nodes</code></li>
<li><code>.renderer</code></li>
<li><code>.unrendered</code></li>
<li><code>.root</code></li>
<li><code>.options</code></li>
</ul>
<h4>支持真实的 CSS 选择器</h4>
<p>v2.x 中的 CSS 选择器使用的是 enzyme 自己的不完整的 CSS 解析，在 v3.x 中支持了真实的 CSS 选择器。</p>
<h4>节点 Equality 时忽略 undefined 值</h4>
<p>即在 v3.x 中下面两个节点被认为是 equal，在 v2.x 中被认为是不等的两个节点</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">&#x26;lt;div /&#x26;gt;
&#x26;lt;div className={undefined} id={undefined} /&#x26;gt;</code></pre></div>
<h4>默认开启生命周期方法</h4>
<p>在 v2.x 中生命周期方法默认是禁用的，需要手动开启。在 v3.x 中生命周期方法默认开启。
在 v3.x 中可以通过一下两种方式关闭：</p>
<ol>
<li>通过顶层 API<code>configure()</code>配置默认关闭：</li>
</ol>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import Enzyme from &#x26;#39;enzyme&#x26;#39;;
Enzyme.configure({ disableLifecycleMethods: true });</code></pre></div>
<ol start="2">
<li>在渲染的时候通过 flag 关闭</li>
</ol>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import { shallow } from &#x26;#39;enzyme&#x26;#39;;
// ...
const wrapper = shallow(&#x26;lt;Component /&#x26;gt;, { disableLifecycleMethods: true });</code></pre></div>
<h3>安装</h3>
<p>对应版本具体安装参考
官方指南：http://airbnb.io/enzyme/docs/installation/
目前我们的项目使用 react@0.14.8 react-dom@0.14.8
首先安装 test utilities addon</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D react-addons-test-utils@0.14
</code></pre></div>
<p>然后安装相应 react 版本的 adapter</p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D enzyme enzyme-adapter-react-14
</code></pre></div>
<h3>API 参考：</h3>
<blockquote>
<p>具体参数和 Example 参考官方文档：http://airbnb.io/enzyme/docs/api/</p>
</blockquote>
<h4>浅渲染 Shallow Rendering</h4>
<p>shallow 方法只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，因此渲染效率高，适合用来做单元测试。</p>
<h5><code>.at(index) => ShallowWrapper</code></h5>
<p>返回当前 wrapper 中索引为 index(以 0 开始)的 warpper</p>
<h5><code>.childAt(index) => ShallowWrapper</code></h5>
<p>返回当前 wrapper 下索引为 index 的子节点 wrapper</p>
<h5><code>.children([selector]) => ShallowWrapper</code></h5>
<p>返回当前 wrapper 下所有的子节点的 wrapper</p>
<h5><code>.closest(selector) => ShallowWrapper</code></h5>
<p>通过遍历当前节点的祖先元素获取第一个匹配 selector 的节点 wrapper</p>
<h4><code>.contains(nodeOrNodes) => Boolean</code></h4>
<p>如果当前渲染中包含所给节点或节点数组（判断节点时会判断 props），返回 true，否则返回 false。</p>
<blockquote>
<p>传入的必须是 ReactElement 或者 JSX 表达式</p>
</blockquote>
<h5><code>.containsAllMatchingElements(nodes) => Boolean</code></h5>
<p>如果当前节点下<strong>相似性</strong>包含全部提供的<code>nodes</code>的子节点（如果给了 props 则判断，没有则忽略），则返回 true，否则返回 false。</p>
<h5><code>.containsAnyMatchingElements(nodes) => Boolean</code></h5>
<p>如果当前节点下<strong>相似性</strong>包含任意一个提供的<code>nodes</code>的子节点（如果给了 props 则判断，没有则忽略），则返回 true，否则返回 false。</p>
<h5><code>.containsMatchingElement(node) => Boolean</code></h5>
<p>表现和上面两种一致，区别是只能传单个节点</p>
<h5><code>.context([key]) => Any</code></h5>
<p>返回当前 wrapper 的节点的 context hash，如果提供了 key，则只返回值。</p>
<h5><code>.debug() => String</code></h5>
<p>为了调试的目的，返回当前 wrapper 的 HTML-like 的字符串表示。</p>
<h5><code>.dive([options]) => ShallowWrapper</code></h5>
<p>浅渲染当前 wrapper 下的一个非 DOM 子元素，并且返回被 wrapper 包裹的结果。</p>
<blockquote>
<p>只能被单个 non-DOM（非 DOM）子元素调用</p>
</blockquote>
<h5><code>.equals(node) => Boolean</code></h5>
<p>判断当前 wrapper 的根节点渲染树是否和传入的节点一致。</p>
<blockquote>
<p>props 为 undefined 会被忽略</p>
</blockquote>
<h5><code>.every(selector) => Boolean</code></h5>
<p>判断 wrapper 中的所有节点是否都匹配<code>selector</code>。</p>
<h5><code>.everyWhere(fn) => Boolean</code></h5>
<p>判断 wrapper 中的所有节点是否都满足传入的断言函数<code>fn</code>。</p>
<h5><code>.exists() => Boolean</code></h5>
<p>判断当前节点是否存在</p>
<h5><code>.filter(selector) => ShallowWrapper</code></h5>
<p>返回匹配满足<code>selector</code>的节点的新的 wrapper</p>
<h5><code>.filterWhere(fn) => ShallowWrapper</code></h5>
<p>返回满足断言函数<code>fn</code>的节点的新的 wrapper</p>
<h5><code>.find(selector) => ShallowWrapper</code></h5>
<p>返回当前节点中匹配<code>selector</code>的所有节点的 wrapper</p>
<h5><code>.findWhere(fn) => ShallowWrapper</code></h5>
<p>返回当前节点中满足断言函数<code>fn</code>的所有节点的 wrapper</p>
<h5><code>.first() => ShallowWrapper</code></h5>
<p>返回一组节点集合中的第一个节点的 wrapper</p>
<h5><code>.forEach(fn) => Self</code></h5>
<p>迭代当前 wrapper 的每一个节点调用提供的<code>fn</code>，fn 的第一个参数是 wrapper 包裹的相应节点，第二个参数是索引 index。和数组的 forEach 方法类似，但是返回值为当前 wrapepr 自身。</p>
<h5><code>.get(index) => ReactElement</code></h5>
<p>返回当前 wrapper 的指定索引为 index 的 ReactElement 节点，而不是 wrapper。</p>
<h5><code>.hasClass(className) => Boolean</code></h5>
<p>判断当前节点是否有指定的<code>className</code>。</p>
<h5><code>.html() => String</code></h5>
<p>返回当前渲染树的 HTML 标记字符串。</p>
<blockquote>
<p>只能被单节点调用</p>
</blockquote>
<h5><code>.instance() => ReactComponent</code></h5>
<p>返回传入<code>shallow()</code>方法作为根节点渲染的组件实例。</p>
<blockquote>
<p>只能被根节点的 wrapper 实例调用</p>
</blockquote>
<h5><code>.is(selector) => Boolean</code></h5>
<p>判断当前节点是否匹配<code>selector</code></p>
<h5><code>.isEmpty() => Boolean</code></h5>
<p>判断当前节点是否为空。</p>
<blockquote>
<p>已弃用，使用<code>.exists()</code>代替</p>
</blockquote>
<h5><code>.key() => String</code></h5>
<p>返回当前 wrapper 节点的 key 值。</p>
<h5><code>.last() => ShallowWrapper</code></h5>
<p>与<code>first()</code>方法对应，返回当前 wrapper 节点中的最后一个。</p>
<h5><code>.map(fn) => Array&#x3C;Any></code></h5>
<p>与<code>forEach()</code>类似，迭代每一个 wrapper，但是返回值是每一个<code>fn</code>的返回值。</p>
<h5><code>.matchesElement(node) => Boolean</code></h5>
<p>判断当前 wrapper 节点是否与所给节点<strong>相似</strong>（wrapper 节点上包含传入节点的所有 props 并且值相等，即使元素类型一样也会返回 true）</p>
<h5><code>.name() => String|null</code></h5>
<p>返回渲染节点的 name</p>
<ul>
<li>如果是组件：设置了 displayName 则返回 displayName，否则返回组件 name。</li>
<li>如果是 DOM 节点：返回 tag name</li>
<li>null：返回 null</li>
</ul>
<h5><code>.not(selector) => ShallowWrapper</code></h5>
<p>筛选出不匹配<code>selector</code>的节点的 wrapper</p>
<h5><code>.parent() => ShallowWrapper</code></h5>
<p>返回当前 wrapper 节点的直接父元素的 wrapper</p>
<h5><code>.parents([selector]) => ShallowWrapper</code></h5>
<p>返回当前 wrapper 节点的所有父元素/祖先元素的 wrapper，可以提供<code>selector</code>作为筛选。</p>
<h5><code>.prop(key) => Any</code></h5>
<p>返回 wrapper 的根节点的<code>prop</code>上属性为<code>key</code>的值。在<code>shallow wrapper</code>上调用时返回的是渲染的组件的根节点的 props，而不是组件自身的 props，如果要返回组件自身的 props 需要调用<code>wrapper.instance().props()</code></p>
<h5><code>.reduce(fn[, initialValue]) => Any</code></h5>
<p>类似于数组的 reduce</p>
<h5><code>.reduceRight(fn[, initialValue]) => Any</code></h5>
<p>reduce 顺序变为从右到左</p>
<h5><code>.render() => CheerioWrapper</code></h5>
<p>返回当前节点子树的 HTML 渲染字符串的 Cheerio 对象</p>
<h5><code>.setContext(context) => Self</code></h5>
<p>设置根节点的<code>context</code>，并且重新渲染</p>
<blockquote>
<p>只能被根节点的 wrapper 实例调用</p>
</blockquote>
<h5><code>.setProps(nextProps) => Self</code></h5>
<p>设置根节点的<code>props</code>，并且调用<code>componentWillReceiveProps</code>生命周期方法</p>
<blockquote>
<p>只能被根节点的 wrapper 实例调用</p>
</blockquote>
<h5><code>.setState(nextState[, callback]) => Self</code></h5>
<p>在根节点实例上调用<code>setState</code>,并且触发重新渲染。</p>
<h5><code>.shallow([options]) => ShallowWrapper</code></h5>
<p>返回浅渲染后的当前节点 wrapper</p>
<h5><code>.simulate(event[, ...args]) => Self</code></h5>
<p>模拟事件</p>
<blockquote>
<p>在 shalow renderer 上不会事件冒泡，应该在真实的节点上模拟事件</p>
</blockquote>
<h5><code>.slice([begin[, end]]) => ShallowWrapper</code></h5>
<p>类似数组的分片，返回分片后的 wrapper</p>
<h5><code>.some(selector) => Boolean</code></h5>
<p>判断 wrappers 中是否有至少一个匹配<code>selector</code></p>
<h5><code>.someWhere(fn) => Boolean</code></h5>
<p>判断 wrappers 中是否有至少一个满足断言函数</p>
<h5><code>.state([key]) => Any</code></h5>
<p>返回 wrapper 的根节点的 state 的 hash，如果传入 key 则返回对应的值</p>
<h5><code>.tap(intercepter) => Self</code></h5>
<p>调用一个拦截器并返回自身</p>
<blockquote>
<p>在调试链式调用的时候很有用</p>
</blockquote>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const result = shallow((
  &#x26;lt;ul&#x26;gt;
    &#x26;lt;li&#x26;gt;xxx&#x26;lt;/li&#x26;gt;
    &#x26;lt;li&#x26;gt;yyy&#x26;lt;/li&#x26;gt;
    &#x26;lt;li&#x26;gt;zzz&#x26;lt;/li&#x26;gt;
  &#x26;lt;/ul&#x26;gt;
)).find(&#x26;#39;li&#x26;#39;)
  .tap(n =&#x26;gt; console.log(n.debug()))
  .map(n =&#x26;gt; n.text());</code></pre></div>
<h5><code>.text() => String</code></h5>
<p>返回当前渲染树的渲染文本</p>
<blockquote>
<p>表现很诡异</p>
</blockquote>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = shallow(&#x26;lt;div&#x26;gt;&#x26;lt;b&#x26;gt;important&#x26;lt;/b&#x26;gt;&#x26;lt;/div&#x26;gt;);
expect(wrapper.text()).to.equal(&#x26;#39;important&#x26;#39;);</code></pre></div>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = shallow(&#x26;lt;div&#x26;gt;&#x26;lt;Foo /&#x26;gt;&#x26;lt;b&#x26;gt;important&#x26;lt;/b&#x26;gt;&#x26;lt;/div&#x26;gt;);
expect(wrapper.text()).to.equal(&#x26;#39;&#x26;lt;Foo /&#x26;gt;important&#x26;#39;);</code></pre></div>
<h5><code>.type() => String|Function|null</code></h5>
<p>返回 wrapper 包裹的当前节点的类型</p>
<ul>
<li>如果是组件：返回组件的 constructor</li>
<li>如果是原生的 DOM 节点，返回标签名</li>
<li>如果是 null：返回 null</li>
</ul>
<h5><code>.unmount() => Self</code></h5>
<p>卸载组件，用来模拟组件生命周期</p>
<h5><code>.update() => Self</code></h5>
<p>强制重新渲染，当外部调用改变组件的 State 时，使用<code>update()</code>进行 re-render</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">class ImpureRender extends React.Component {
  constructor(props) {
    super(props);
    this.count = 0;
  }
  render() {
    this.count += 1;
    return &#x26;lt;div&#x26;gt;{this.count}&#x26;lt;/div&#x26;gt;;
  }
}</code></pre></div>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = shallow(&#x26;lt;ImpureRender /&#x26;gt;);
expect(wrapper.text()).to.equal(&#x26;#39;0&#x26;#39;);
wrapper.update();
expect(wrapper.text()).to.equal(&#x26;#39;1&#x26;#39;);</code></pre></div>
<h4>全渲染 Full Rendering</h4>
<p>将 React 组件渲染为真实的 DOM 节点，因此可以使用 DOM 事件。<code>mount()</code>需要环境提供完整的 DOM API,因此需要使用一个“Browser Like”的环境，例如 JSDOM 或者 Phantoms，或者直接在真实浏览器下运行。</p>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import { mount } from &#x26;#39;enzyme&#x26;#39;;
const wrapper = mount(&#x26;lt;MyComponent /&#x26;gt;);</code></pre></div>
<blockquote>
<p>提供的 API 与 Shallow Rendering 几乎一致</p>
</blockquote>
<h4>静态渲染 Static Rendering</h4>
<p>将 React 组件渲染为静态的 HTML 字符串，然后返回一个 Cheerio 实例对象，使用 Cheerio 来分析 HTML 的结构。（Cheerio 常在爬虫的时候用来分析爬到的 HTML 结构）</p>
<blockquote>
<p>返回 Cherrio 对象，因此可以使用 Cherrio 的 API</p>
</blockquote>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">import { render } from &#x26;#39;enzyme&#x26;#39;;
const wrapper = render(&#x26;lt;MyComponent /&#x26;gt;);</code></pre></div>
<h4>Selectors</h4>
<h5>1.任何合法的 CSS 选择器</h5>
<h5>2.Prop 选择器</h5>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = mount((
  &#x26;lt;div&#x26;gt;
    &#x26;lt;span foo={3} bar={false} title=&#x26;quot;baz&#x26;quot; /&#x26;gt;
  &#x26;lt;/div&#x26;gt;
));

wrapper.find(&#x26;#39;[foo=3]&#x26;#39;);
wrapper.find(&#x26;#39;[bar=false]&#x26;#39;);
wrapper.find(&#x26;#39;[title=&#x26;quot;baz&#x26;quot;]&#x26;#39;);</code></pre></div>
<blockquote>
<p>不能使用 key 和 ref 作为选择器使用</p>
</blockquote>
<h5>3.React Component Constructor</h5>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">function MyComponent() {
  return &#x26;lt;div /&#x26;gt;;
}

// find instances of MyComponent
const myComponents = wrapper.find(MyComponent);</code></pre></div>
<h5>4.React Component's displayName</h5>
<h5>5.对象属性选择器</h5>
<div class="remark-highlight"><pre class="language-react"><code class="language-react">const wrapper = mount((
  &#x26;lt;div&#x26;gt;
    &#x26;lt;span foo={3} bar={false} title=&#x26;quot;baz&#x26;quot; /&#x26;gt;
  &#x26;lt;/div&#x26;gt;
));

wrapper.find({ foo: 3 });
wrapper.find({ bar: false });
wrapper.find({ title: &#x26;#39;baz&#x26;#39; });</code></pre></div>
<blockquote>
<p>对象属性选择器中不能使用属性值为 undefined 的属性，会报错，可以使用<code>findWhere()</code>方法代替</p>
</blockquote>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[断言库Chai-expect-API一览]]></title>
        <id>https://jiangwenyang.com/posts/Chai-expect API一览</id>
        <link href="https://jiangwenyang.com/posts/Chai-expect API一览"/>
        <updated>2017-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[简单介绍断言库 excerpt 风格的断言语法]]></summary>
        <content type="html"><![CDATA[<p>花了几天时间简单的翻译并学习了 chai 的官方 API 文档，了解如何写出可读性更好的ＢＤＤ的风格的测试断言。官方的一个核心建议是：尽量使用 language chains 提高可读性，尽量进行正面断言而不是反面断言，即断言被测对象是什么，而不是断言对象不是什么，断言对象包含什么，而不是不包含什么，因为往往能确定的东西是更少部分的、容易覆盖的，不确定的方面可能是多方面的、难以覆盖的。</p>
<h2>概述</h2>
<p>Chai 提供了 BDD/TDD 风格的断言库，并且支持在 node 和浏览器端搭配任意测试框架进行使用。</p>
<h2>安装</h2>
<p><strong>Node.js</strong></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">npm install chai</code></pre></div>
<p><strong>Brower</strong></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">&#x26;lt;script src=&#x26;quot;chai.js&#x26;quot; type=&#x26;quot;text/javascript&#x26;quot;&#x26;gt;&#x26;lt;/script&#x26;gt;</code></pre></div>
<p>通过 script 标签引入，然后作为全局变量使用。</p>
<h2>断言风格</h2>
<h3>Assert</h3>
<p>TDD 风格的断言，和 node 的 assert 断言相似，并且进行了扩展和浏览器兼容。可读性较差。</p>
<h3>Should&#x26;&#x26;Expect</h3>
<p>和 Expect 都是 BDD 风格，可读性强。两者使用相同的可连缀的语法来构建断言，两者的不同之处在于 Expect 是使用构造函数来创建断言，例：<code>expect(foo).to.be.a('string');</code>，而 Should 通过在 Object.prototype 上新增方法来进行断言，例：<code>expect(answer).to.equal(42);</code>
<strong>注意点：</strong></p>
<ul>
<li>引用</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">var chai = require(&#x26;#39;chai&#x26;#39;)
 , expect = chai.expect
 , should = chai.should();</code></pre></div>
<ul>
<li>兼容性
Should 不兼容 IE 浏览器，Should 在使用上有一些坑，例如断言不存在的对象 obj，可能会这样写：<code>obj.should.not.exist</code>，但是既然 obj 已经是 undefind 了，因此会报错。</li>
</ul>
<h2>Expect/Should API 一览</h2>
<p><strong>Language Chains</strong>
为了让测试用例更加可读，提供了无断言功能的语言连接词。</p>
<ul>
<li>to</li>
<li>be</li>
<li>been</li>
<li>is</li>
<li>that</li>
<li>which</li>
<li>and</li>
<li>has</li>
<li>have</li>
<li>with</li>
<li>at</li>
<li>of</li>
<li>same</li>
<li>but</li>
<li>does</li>
</ul>
<p><strong>.not</strong>
连接在其他断言如<code>.equal</code>之前，表示“非”的意思，建议进行正面断言，即断言结果是什么，而不是去断言结果不是什么。</p>
<p><strong>.deep</strong>
作为<code>.equal</code>,<code>.include</code>,<code>.members</code>,<code>.keys</code>,<code>.property</code>的前缀，使得断言将使用深比较而不是严格相等（<code>===</code>）。</p>
<p><strong>.nested</strong>
允许在<code>.property</code>,<code>.include</code>中使用<code>.</code>语法和<code>[]</code>语法。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">expect({a: {b: [&#x26;#39;x&#x26;#39;, &#x26;#39;y&#x26;#39;]}}).to.have.nested.property(&#x26;#39;a.b[1]&#x26;#39;);</code></pre></div>
<blockquote>
<p>如果属性字面量中包含.或者[]使用<code>//</code>进行转译。</p>
</blockquote>
<p><strong>.own</strong>
作为<code>.property</code>,<code>.include</code>的前缀，使得断言将忽略继承属性，而只检查自身属性。</p>
<blockquote>
<p><code>.own</code>不能连接到<code>.nested</code>后</p>
</blockquote>
<p><strong>.ordered</strong>
作为<code>.members</code>的前缀，使 members 断言时要求顺序一致。</p>
<p><strong>.any</strong>
作为<code>.keys</code>的前缀，断言目标有所给 keys 中的任意一个。</p>
<p><strong>.all</strong>
作为<code>.keys</code>的前缀，断言目标有所给的全部 keys。</p>
<blockquote>
<p><code>.all</code>是<code>.keys</code>的默认前置状态，即当<code>.keys</code>前不跟<code>.all</code>和<code>.any</code>时返回<code>.all.keys</code>的结果</p>
</blockquote>
<p><strong>.a(type[, msg])</strong></p>
<ul>
<li>@param { String } type 类型（如 string | object | error | promise）</li>
<li>@param { String } msg <em>optional</em> 可选描述，断言失败后显示</li>
</ul>
<blockquote>
<ul>
<li>可以前置<code>.not</code>但是建议正面断言，而不是反面断言，因为往往正面的 type 更少，而反面的 type 难以覆盖。例如应该断言‘aaa’是一个 string，而不是应该断言它不是一个 object。</li>
<li><code>.a</code>在做为语言连接词时不起断言作用，只是提高可读性，并且可以使用<code>.an</code>代替。</li>
</ul>
</blockquote>
<p><strong>.include(val[,msg])</strong></p>
<ul>
<li>@param { Mixed } val 任意类型的值</li>
<li>@param { String } msg <em>optional</em></li>
</ul>
<p>根据 target 的类型进行“包含”断言：</p>
<ul>
<li>string
断言是否包含所传入子串 subtring。</li>
<li>object
断言所传入对象的属性是否为 target 的属性的子集。</li>
<li>Set 或 WeakSet
断言所传入的值包含在是 target 的成员（使用 SameValueZero 算法进行比较，即两个 NaN 和正负零都视为相同）。</li>
<li>Map
断言传入的值是 target 的值中的一个。</li>
</ul>
<blockquote>
<ul>
<li>由于<code>.inculde</code>的行为是根据 target 来表现的，因此在这之前检查 target 的类型是很重要的，因此在<code>.include</code>之前使用<code>.a(type)</code>进行断言。</li>
<li>默认使用严格相等（===）进行比较，可以在之前使用<code>.deep</code>来使用深比较的方式</li>
<li>当 target 为 object 时断言会检查对象的原型链，可以使用<code>.own</code>作为前缀排除原型属性</li>
<li><code>.contain</code>,<code>.contains</code>作为<code>.include</code>的别名使用</li>
<li><code>.include</code>也可以作为语言连接词使用</li>
</ul>
</blockquote>
<p><strong>.ok</strong>
断言 target 是<code>==</code>true 的，更多时候建议使用<code>===</code>或者深比较来代替</p>
<p><strong>.true .false .null .undefined</strong>
断言 target 是<code>===</code>true false null undefined</p>
<p><strong>.NaN</strong>
断言 target 为 NaN</p>
<p><strong>.exist</strong>
断言 target 不<code>===</code>null 或者 undefined</p>
<p><strong>.empty</strong></p>
<ul>
<li>target 为 string 或者 array 时，断言 length 属性<code>===</code>0</li>
<li>target 为 map 或者 set，断言 size 属性<code>===</code>0</li>
</ul>
<p><strong>.arguments</strong>
断言 target 是一个<code>arguments</code>对象</p>
<p><strong>.equal(val[, msg])</strong></p>
<ul>
<li>@param { Mixed } val 值</li>
<li>@param { String } msg <em>optional</em> 断言描述信息
断言 target<code>===</code>所给值
<blockquote>
<p><code>.equals</code>,<code>.eq</code>是<code>.equal</code>的别名</p>
</blockquote>
</li>
</ul>
<p><strong>.eql(obj[, msg])</strong>
断言 target 与所给值深度相等。</p>
<blockquote>
<ul>
<li><code>.eqls</code>是<code>.eql</code>的别名</li>
<li>和<code>.deep.equal</code>的唯一区别是<code>.eql()</code>后面不能再连缀</li>
</ul>
</blockquote>
<p><strong>.above(n[, msg]) .least(n[, msg]) .below(n[, msg]) .most(n[, msg])</strong></p>
<ul>
<li>@param { Number } n</li>
<li>@param { String } msg <em>optional</em>
断言 target（number 或者 date）<code>></code>,<code>>=</code>,<code>&#x3C;</code>,<code>&#x3C;=</code>所给值
<blockquote>
<p>最好断言这个值是什么,即使用<code>.equal</code></p>
</blockquote>
</li>
</ul>
<p><strong>.within(start, finish[, msg])</strong>
@param { Number } start lower bound inclusive
@param { Number } finish upper bound inclusive
@param { String } msg <em>optional</em>
断言 target（number 或者 date）处于某个闭区间[start,finish]</p>
<p><strong>.instanceof(constructor[, msg])</strong></p>
<ul>
<li>@param { Constructor } constructor</li>
<li>@param { String } msg <em>optional</em>
断言 target 是所给构造函数的实例
<blockquote>
<p>当使用 bable 或 typescript 的时候可能会有问题</p>
</blockquote>
</li>
</ul>
<p><strong>.property(name[, val[, msg]])</strong></p>
<ul>
<li>@param { String } name</li>
<li>@param { Mixed } val (optional)</li>
<li>@param { String } msg <em>optional</em>
断言 target 有所给键或者键值对</li>
</ul>
<blockquote>
<ul>
<li>默认使用<code>===</code>,可以使用<code>.deep</code>来使用深度比较\</li>
<li>默认包含可枚举和不可枚举属性，如果只想断言可枚举属性可前置<code>.own</code></li>
</ul>
</blockquote>
<p><strong>.lengthOf(n[, msg])</strong></p>
<ul>
<li>@param { Number } n</li>
<li>@param { String } msg <em>optional</em>
断言 target 的 length 属性<code>===</code>所给值</li>
</ul>
<p><strong>.match(re[, msg])</strong></p>
<ul>
<li>@param { RegExp } re</li>
<li>@param { String } msg <em>optional</em>
断言 target 匹配所给正则</li>
</ul>
<p><strong>.string(str[, msg])</strong></p>
<ul>
<li>@param { String } str</li>
<li>@param { String } msg <em>optional</em>
断言 target String 包含所给子字符串
<blockquote>
<p>可以使用 contain()代替</p>
</blockquote>
</li>
</ul>
<p><strong>.keys(key1[, key2[, …]])</strong></p>
<ul>
<li>@param { String | Array | Object } keys
断言 target object,array,map 或者 set 有所给的 keys</li>
</ul>
<blockquote>
<p>当传入的值是对象的时候，对象的值将被忽略</p>
</blockquote>
<p><strong>.throw([errorLike], [errMsgMatcher], [msg])</strong></p>
<ul>
<li>@param { Error | ErrorConstructor } errorLike</li>
<li>@param { String | RegExp } errMsgMatcher error message</li>
<li>@param { String } msg <em>optional</em></li>
<li>@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
断言 target 函数抛出的错误</li>
</ul>
<p><strong>.respondTo(method[, msg])</strong></p>
<ul>
<li>@param { String } method</li>
<li>@param { String } msg <em>optional</em>
断言 target 是否有所给 method（自身或者继承）</li>
<li>target 为构造函数时
断言这个构造函数有所给 method 方法</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">function Foo(){}
expect(new Foo())</code></pre></div>
<ul>
<li>target 为函数时</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">expect(Foo)</code></pre></div>
<p>断言函数的<strong>原型上</strong>有所给方法（自身的或者继承的）</p>
<blockquote>
<p>两者的区别是前者直接断言本身，后者断言 target 的 prototype。可以通过前置<code>.itself</code>使得断言函数时断言其本身</p>
</blockquote>
<p><strong>.satisfy(matcher[, msg])</strong></p>
<ul>
<li>@param { Function } matcher</li>
<li>@param { String } msg <em>optional</em>
将 target 作为 matcher 的第一个参数传入，断言 matcher 函数的返回值为 true</li>
</ul>
<p><strong>.closeTo(expected, delta[, msg])</strong></p>
<ul>
<li>@param { Number } expected</li>
<li>@param { Number } delta</li>
<li>@param { String } msg <em>optional</em>
断言 target 是否在[expected-delta,expected+delta]的范围内</li>
</ul>
<p><strong>.members(set[, msg])</strong></p>
<ul>
<li>@param { Array } set</li>
<li>@param { String } msg <em>optional</em>
断言 target 数组中包含所给数组</li>
</ul>
<p><strong>.oneOf(list[, msg])</strong></p>
<ul>
<li>@param { Array.&#x3C;*> } list</li>
<li>@param { String } msg <em>optional</em>
断言 target 是所给 list 的一个成员</li>
</ul>
<p><strong>.change(subject[, prop[, msg]])</strong></p>
<ul>
<li>@param { String } subject</li>
<li>@param { String } prop name <em>optional</em></li>
<li>@param { String } msg <em>optional</em>
断言 target 函数调用前后，subject 的值，或者 subject.prop 的值相等</li>
</ul>
<p><strong>.increase(subject[, prop[, msg]]) .decrease(subject[, prop[, msg]])</strong></p>
<ul>
<li>@param { String | Function } subject</li>
<li>@param { String } prop name <em>optional</em></li>
<li>@param { String } msg <em>optional</em>
断言 target 函数调用前后 subject 的值，或者 subject.prop 的值增加或减少</li>
</ul>
<p><strong>.by(delta[, msg])</strong></p>
<ul>
<li>@param { Number } delta</li>
<li>@param { String } msg <em>optional</em>
连缀在<code>.increase</code>,<code>.decrease</code>之后，断言增加减少的值</li>
</ul>
<p><strong>.extensible</strong>
断言 target 是可扩展的（可以添加新的属性）</p>
<p><strong>.sealed</strong>
断言 target 是封闭的（不能添加新属性，不能重新分配或删除已有属性，但是可以对已有属性重新赋值）</p>
<p><strong>.frozen</strong>
断言 target 是冻结的（不能添加新属性，不能重新分配已有属性，删除已有属性或对已有属性重新赋值）</p>
<p><strong>.finite</strong>
断言 target 是 number，并且不是 NaN 或者正负无穷</p>
<p><strong>.fail(actual, expected, [message], [operator])</strong></p>
<ul>
<li>@param { Mixed } actual</li>
<li>@param { Mixed } expected</li>
<li>@param { String } message</li>
<li>@param { String } operator
抛出一个错误</li>
</ul>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[React事件绑定]]></title>
        <id>https://jiangwenyang.com/posts/React事件绑定</id>
        <link href="https://jiangwenyang.com/posts/React事件绑定"/>
        <updated>2017-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[简单介绍及对比了React事件绑定的几种方式]]></summary>
        <content type="html"><![CDATA[<p>由于类的方法默认不会绑定 this，因此在调用的时候如果忘记绑定，this 的值将会是 undefined。
通常如果不是直接调用，应该为方法绑定 this。绑定方式有以下几种：</p>
<h2>1. 在构造函数中使用 bind 绑定 this</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">handleClick</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Click</span> me<span class="token operator">&#x3C;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>2. 在调用的时候使用 bind 绑定 this</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">handleClick</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Click</span> me<span class="token operator">&#x3C;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>3. 在调用的时候使用箭头函数绑定 this</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Click</span> me<span class="token operator">&#x3C;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>4. 使用属性初始化器语法绑定 this(实验性)</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">handleClick</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token maybe-class-name">Click</span> me<span class="token operator">&#x3C;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>比较</h2>
<p><strong>方式 2</strong>和<strong>方式 3</strong>都是在调用的时候再绑定 this。</p>
<ul>
<li>**优点：**写法比较简单，当组件中没有 state 的时候就不需要添加类构造函数来绑定 this</li>
<li>**缺点：**每一次调用的时候都会生成一个新的方法实例，因此对性能有影响，并且当这个函数作为属性值传入低阶组件的时候，这些组件可能会进行额外的重新渲染，因为每一次都是新的方法实例作为的新的属性传递。</li>
</ul>
<p><strong>方式 1</strong>在类构造函数中绑定 this，调用的时候不需要再绑定</p>
<ul>
<li>**优点：**只会生成一个方法实例，并且绑定一次之后如果多次用到这个方法也不需要再绑定。</li>
<li>**缺点：**即使不用到 state，也需要添加类构造函数来绑定 this，代码量多一点。。。</li>
</ul>
<p>**方式 4：**利用属性初始化语法，将方法初始化为箭头函数，因此在创建函数的时候就绑定了 this。
<strong>优点：<strong>创建方法就绑定 this，不需要在类构造函数中绑定，调用的时候不需要再作绑定。结合了</strong>方式 1</strong>、<strong>方式 2</strong>、<strong>方式 3</strong>的优点
**缺点：**目前仍然是实验性语法，需要用 babel 转译</p>
<h2>总结</h2>
<p>方式 1 是官方推荐的绑定方式，也是性能最好的方式。方式 2 和方式 3 会有性能影响并且当方法作为属性传递给子组件的时候会引起重渲问题。方式 4 目前属于实验性语法，但是是最好的绑定方式，需要结合 bable 转译</p>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[React高价组件（HOC）]]></title>
        <id>https://jiangwenyang.com/posts/React高价组件（HOC）</id>
        <link href="https://jiangwenyang.com/posts/React高价组件（HOC）"/>
        <updated>2017-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[简单介绍什么是React高阶组件]]></summary>
        <content type="html"><![CDATA[<h2>React 高阶组件（HOC）</h2>
<blockquote>
<p>含义： 高阶组件就是一个 React 组件包裹着另外一个 React 组件
用处：通过函数向现有组件类添加逻辑或者改变现有组件的行为</p>
</blockquote>
<p>通常有两种实现高阶组件的方式：</p>
<ul>
<li>Props Proxy（属性代理）：高阶组件对传给其中的组件的 props 进行管理</li>
<li>Inheritance Inversion（反向继承）：高阶组件继承包裹其中的组件</li>
</ul>
<h3>Props Proxy</h3>
<p>高阶组件通常使用函数来实现，而实现一个 Props Proxy 方式的高阶组件类似于：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">ChildComponent</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">Pphoc</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span><span class="token maybe-class-name">ChildComponent</span> <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h4>Props Proxy 的特点</h4>
<ul>
<li>可以操作 props（CRUD）</li>
<li>可以通过 Refs 访问到被代理的组件实例</li>
<li>可以提取 state</li>
<li>可以给被代理组件定义样式，通过使用其他元素包裹</li>
</ul>
<h5>操作 props</h5>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">ChildComponent</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">Pphoc</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> newProps<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"tom"</span>
        <span class="token punctuation">}</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span><span class="token maybe-class-name">ChildComponent</span> <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>newProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h5>通过 Refs 获取代理组件实例</h5>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">ChildComponent</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">Pphoc</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
        <span class="token function">proxyComponet</span><span class="token punctuation">(</span><span class="token parameter">proxyComponetInstance</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            proxyComponetInstance<span class="token punctuation">.</span><span class="token method function property-access">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword control-flow">return</span>
            <span class="token operator">&#x3C;</span><span class="token maybe-class-name">ChildComponent</span>
                <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">}</span>
                ref<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">proxyComponet</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<blockquote>
<p>ref callback
当给一个组件定义 ref 为一个 callback 时，callback 会在组件被挂载后立即执行，被引用的组件的实例会作为参数传递，然后就可以在回调中使用这个组件实例。</p>
</blockquote>
<h5>提取 state</h5>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">ChildComponent</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">Pphoc</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">onChangeName</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span>
        <span class="token literal-property property">onchange</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">onChangeName</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span><span class="token maybe-class-name">ChildComponent</span> <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>newProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@<span class="token constant">HOC</span>
<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token operator">&#x3C;</span>input name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h5>使用其他元素包裹</h5>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">ChildComponent</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">Pphoc</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
                <span class="token operator">&#x3C;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
                    <span class="token operator">&#x3C;</span><span class="token maybe-class-name">ChildComponent</span> <span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>Inheritance Inversion</h3>
<p>反向继承通过返回一个继承自传入组件的新组件的方式实现：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">childComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">childComponent</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h4>Inheritance Inversion 的特点</h4>
<ul>
<li>操作 state</li>
<li>渲染劫持</li>
</ul>
<h5>操作 state</h5>
<p>因为返回的组件是继承自传入的组件，因此可以直接使用 this.props 和 this.state 读取传入组件的 props 和 state,并且可以修改 state</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">childComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">childComponent</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&#x3C;</span>div<span class="token operator">></span>
          <span class="token operator">&#x3C;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token operator">&#x3C;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">state</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token operator">&#x3C;</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&#x3C;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h5>渲染劫持</h5>
<p>可以保存传入组件的 render()结果，然后返回新的 render 结果。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">childComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">childComponent</span><span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> tree<span class="token operator">=</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//保存render结果</span>
      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
           <span class="token keyword">const</span> newProps<span class="token operator">=</span><span class="token punctuation">{</span>
               name<span class="token operator">=</span><span class="token string">"tom"</span>
           <span class="token punctuation">}</span>
           <span class="token keyword">const</span> props<span class="token operator">=</span><span class="token punctuation">{</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">,</span><span class="token spread operator">...</span>newProps<span class="token punctuation">}</span><span class="token punctuation">;</span>
           <span class="token keyword">const</span> newTree <span class="token operator">=</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method function property-access">cloneElement</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> props<span class="token punctuation">,</span> tree<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于karma的前端单元测试]]></title>
        <id>https://jiangwenyang.com/posts/基于karma的前端单元测试</id>
        <link href="https://jiangwenyang.com/posts/基于karma的前端单元测试"/>
        <updated>2017-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[简单介绍如何配置karma和webpack来进行前端测试]]></summary>
        <content type="html"><![CDATA[<h2>karma + karma-webpack</h2>
<ul>
<li>开发语言：typescript + react</li>
<li>测试平台：karma</li>
<li>测试框架：mocha</li>
<li>断言库：chai</li>
<li>测试桩：sinon</li>
<li>打包|编译工具：karma-webpack | karma-typescript</li>
<li>测试覆盖率：istanbul-instrumenter-loader</li>
</ul>
<p>因为开发语言使用的是 typescript，因此需要编译之后才能在浏览器上跑，但是编译后加入大量的 polyfill 导致覆盖率不准确的问题比较麻烦。</p>
<h3>不用<a href="https://github.com/monounity/karma-typescript">karma-typescript</a>？</h3>
<p>利用 karma-typescript 直接运行 typescript 编写的单元测试而不用进行额外的编译，并且集成了 karma-coverage 和 Istanbul 进行代码覆盖率统计。
缺点是每个测试文件和源文件都需要通过 srcipt 标签引入并串行执行，用例太多时浏览器性能有影响。并且不支持图像资源、字体资源等的引入。</p>
<p>karma-typescript 支持的 transform：</p>
<ul>
<li><a href="https://github.com/monounity/karma-typescript-angular2-transform">karma-typescript-angular2-transform</a></li>
<li><a href="https://github.com/monounity/karma-typescript-cssmodules-transform">karma-typescript-cssmodules-transform</a></li>
<li><a href="https://github.com/monounity/karma-typescript-es6-transform">karma-typescript-es6-transform</a></li>
<li><a href="https://github.com/monounity/karma-typescript-postcss-transform">karma-typescript-postcss-transform</a></li>
</ul>
<p>因此在不涉及到图像资源等非 css 外部资源引用时，使用 karma-typescript 进行测试是比较好的，因此可以考虑使用 karma-typescript 进行 API 的测试。</p>
<p><strong>安装：</strong></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">yarn add -D karma-typescript</code></pre></div>
<p><strong>karma-conf.js 配置</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  config<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">frameworks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jasmine"</span><span class="token punctuation">,</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"src/**/*.ts"</span><span class="token punctuation">,</span> <span class="token comment">// *.tsx for React Jsx</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">preprocessors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">"**/*.ts"</span><span class="token operator">:</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">,</span> <span class="token comment">// *.tsx for React Jsx</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">reporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"progress"</span><span class="token punctuation">,</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browsers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Chrome"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>这是 karma-typescript 的官方配置 demo，但是这样配置会将测试用例的覆盖率也算进来。
官方的<a href="https://github.com/monounity/karma-typescript/blob/master/cookbook.md">cookbook</a>项目上给出了测试代码分离的 demo</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  config<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">frameworks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jasmine"</span><span class="token punctuation">,</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">"src/**/*.ts"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">"test/**/*.ts"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token literal-property property">preprocessors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">"src/**/*.ts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"karma-typescript"</span><span class="token punctuation">,</span> <span class="token string">"coverage"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">"test/**/*.ts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token literal-property property">reporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"progress"</span><span class="token punctuation">,</span> <span class="token string">"coverage"</span><span class="token punctuation">,</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token literal-property property">browsers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Chrome"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>当使用<code>coverage</code>的时候，只有使用<code>coverage</code>预编译的代码会算入覆盖率中，上面的 demo 中只有<code>src</code>目录下的代码会被统计覆盖率，<code>test</code>目录下的测试文件则不会被统计。</p>
<p><strong>陷阱：</strong></p>
<blockquote>
<p>ts.config.json 中如果"files"和"include"都没有被指定，编译器默认包含当前目录和子目录下所有的 TypeScript 文件（.ts, .d.ts 和 .tsx）。编译 d.ts 文件会报错，因此在 karma-conf.js 文件中使用 exclude 排除 d.ts 文件。-- https://www.tslang.cn/docs/handbook/tsconfig-json.html</p>
</blockquote>
<h3>karma-webpack + istanbul-instrumenter-loader</h3>
<p><a href="https://github.com/webpack-contrib/karma-webpack#karma-webpack">karma-webpack</a>
通过 karma-webpack 能在 karma 中集成 webpack，如果在项目中已经使用 webpack，那么使用 karma-webpack 可能是个更好的选择，能给直接使用原有的 webpack 配置。
<strong>安装：</strong></p>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> karma-webpack
</code></pre></div>
<p><strong>使用：</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

        <span class="token literal-property property">frameworks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"mocha"</span><span class="token punctuation">,</span> <span class="token string">"karma-typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">"test/**/*.ts"</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>

        <span class="token literal-property property">preprocessors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">"test/**/*.ts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"webpack"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用webpack进行编译</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">browsers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Chrome"</span><span class="token punctuation">]</span>，
        <span class="token literal-property property">webpack</span><span class="token operator">:</span><span class="token punctuation">{</span>
            module：<span class="token punctuation">{</span><span class="token punctuation">}</span>
            resolve：<span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token comment">// 所有可用的webpack配置项</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>将需要编译的代码使用 webpack 预编译即可，同时因为 webpack 会自动打包依赖，因此<code>files</code>中只需要引入 test 文件，对应的被测文件会按照依赖被自动打包。</p>
<p><a href="https://github.com/webpack-contrib/istanbul-instrumenter-loader">istanbul-instrumenter-loader</a>
通过使用 webpack 插件 istanbul-instrumenter-loader 对代码进行打点，以实现代码覆盖率的统计。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token literal-property property">webpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// karma watches the test entry points</span>
  <span class="token comment">// (you don't need to specify the entry option)</span>
  <span class="token comment">// webpack watches dependencies</span>

  <span class="token comment">// webpack configuration</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.tsx'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span>node_modules<span class="token alternation keyword">|</span>libs<span class="token alternation keyword">|</span><span class="token special-escape escape">\.</span>test<span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span><span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//排除不需要打点的测试代码和库</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'istanbul-instrumenter-loader'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token comment">//作为后置loader使用</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">esModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用ES2015</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div>
<p><strong>管理依赖</strong>
通过上面的方式打包的文件如果指定 output 能生成单个测试套件，但是如果测试套件很多的时候会生成多个大文件。解决这个问题可以通过 webpack 的<a href="https://doc.webpack-china.org/guides/dependency-management/#require-context"><code>require.context()</code></a> 解决，
require 能定义 require 的上下文，并且搜索目录，将满足正则的文件进行处理，返回一个包含两个方法 keys()和 resolve()以及一个属性 id 的方法。</p>
<p><em>新建 test.js</em></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 导入所有测试用例</span>
<span class="token keyword">const</span> testsContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">"./src"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>test<span class="token special-escape escape">\.</span>ts<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testsContext<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>testsContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>然后在<code>karma.conf.js</code>中将<code>test.js</code>作为入口</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">module.exports = function(config) {
    config.set({

        frameworks: [&#x26;quot;mocha&#x26;quot;, &#x26;quot;karma-typescript&#x26;quot;],

        files: [
            &#x26;quot;test.js&#x26;quot;
        ],

        preprocessors: {
            &#x26;quot;test.js&#x26;quot;: [&#x26;quot;webpack&#x26;quot;], // 使用webpack进行编译
        },
        browsers: [&#x26;quot;Chrome&#x26;quot;]，
        webpack:{
            module：{}
            resolve：{}
            // 所有可用的webpack配置项
        }
    });
};</code></pre></div>
<p>将多个依赖合并到一个入口，因此通过这种方式生成单个的打包文件。</p>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mongoose官方API一览]]></title>
        <id>https://jiangwenyang.com/posts/Mongoose官方API一览</id>
        <link href="https://jiangwenyang.com/posts/Mongoose官方API一览"/>
        <updated>2017-04-16T11:30:16.000Z</updated>
        <summary type="html"><![CDATA[Mongoose是比较流行的MongoDB的ODM库，简化了对MongoDB的操作，本文简单介绍（翻译）了部分常用API]]></summary>
        <content type="html"><![CDATA[<h2>简单起步</h2>
<h3>一、安装</h3>
<p>使用 npm 安装 mongoose，在这之前应该安装配置好 mongoDB，具体安装方法可以参考 MongoDB 官方安装指导。</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> mongoose
</code></pre></div>
<h3>二、连接数据库</h3>
<p>预连接（mongoose 监听数据库端口，尝试进行连接）到默认的<em>localhost</em>的<em>test</em>数据库。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mongoose<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//mongoDB的数据库连接都是以mongodb://打头，后面跟数据库路径</span>
</code></pre></div>
<h3>三、判断是否成功连接数据库</h3>
<p>前面已经进行数据库的预连接，在数据库开启成功，连接路径没有问题的情况下一般就能正常连接了。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token property-access">connection</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">"connection error:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token method function property-access">once</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 连接成功，后续数据库操作都在回调中进行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>四、定义模式</h3>
<p>模式是 mongoose 的核心，相当于 SQL 的数据表结构，在这里定义文档的键以及对应的值的类型，以及定义文档的实例方法和模型的静态方法。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Schema</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Schema</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">UserSchema</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>值对应的类型是 SchemaType，可用的有：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Date</li>
<li>Buffer</li>
<li>Boolean</li>
<li>Mixed</li>
<li>ObjectId</li>
<li>Array</li>
</ul>
<h3>五、导出模型</h3>
<p>真正能对数据库进行操作的是模型和文档，模型是我们构建文档的类，文档是模型的实例，文档的颗粒度比文档更小。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Model</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token maybe-class-name">UserSchema</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>六、生成文档</h3>
<p>文档相当于 SQL 中的一行，是真正存储在数据库中的数据。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>七、将文档保存到数据库</h3>
<p>在上一步我们仍然没有在数据库中保存任何数据，只是生成了文档，但是并没有存入数据库，我们可以使用在文档上*save（）*方法将生成的文档存入数据库。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">tom<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> tom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//进行其他操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>八、查询数据库</h3>
<p>查询数据库文档，通过在<em>model</em>上使用<em>find</em>方法。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">user<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"tom"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><em>如果不传入查询条件将会查询所有文档</em></p>
<hr>
<h2>相关 API</h2>
<h3>模式</h3>
<h4>定义 Schema</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Schema</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Schema</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">,</span> <span class="token keyword module">default</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token property-access">now</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token known-class-name class-name">Boolean</span><span class="token punctuation">,</span>
  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">votes</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span>
    <span class="token literal-property property">favs</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>创建模型</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Blog</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Blog"</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>实例方法</h4>
<p>文档是模型的实例，文档拥有许多自己的内置方法，我们也可以通过在 Schema 上定义自己的实例方法给文档使用。<code>[SchemaName].methods.[functionName]</code></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// define a schema</span>
<span class="token keyword">var</span> animalSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// assign a function to the "methods" object of our animalSchema</span>
animalSchema<span class="token punctuation">.</span><span class="token property-access">methods</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">findSimilarTypes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>因为实例方法是暴露给文档的，因此实例方法内部的 this 指向文档，所以它拥有 model 和 type 属性，可以通过<em>model</em>属性来回溯使用模型来进行同类文档的查询</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Animal</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">,</span> animalSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"dog"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token method function property-access">findSimilarTypes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dogs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// woof</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><em>避免重新内置的实例方法，可能会导致不可预料的问题</em></p>
<h4>静态方法</h4>
<p>静态方法是模型上的方法，静态方法同样是在模式上进行定义的。<code>[SchemaName].statics.[functionName]</code></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// assign a function to the "statics" object of our animalSchema</span>
animalSchema<span class="token punctuation">.</span><span class="token property-access">statics</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">findByName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Animal</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">,</span> animalSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">findByName</span><span class="token punctuation">(</span><span class="token string">"fido"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> animals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>索引</h4>
<p>定义 Schema 的时候，对属性建立索引</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animalSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tags</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token known-class-name class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// field level</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalSchema<span class="token punctuation">.</span><span class="token method function property-access">index</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// schema level</span>
</code></pre></div>
<h4>虚拟属性</h4>
<p>虚拟属性是文档中的你希望可以得到并且设置的但是又不能存入数据库中的属性。获取一般用于格式化多个属性值，设置一般用于将单个属性值分解为多个值来进行存储。</p>
<p>Getter</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// define a schema</span>
<span class="token keyword">var</span> personSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
    <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// compile our model</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Person</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> personSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// create a document</span>
<span class="token keyword">var</span> bad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token string">"Walter"</span><span class="token punctuation">,</span> <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token string">"White"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//define virtual property</span>
personSchema<span class="token punctuation">.</span><span class="token method function property-access">virtual</span><span class="token punctuation">(</span><span class="token string">"name.full"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"%s is insane"</span><span class="token punctuation">,</span> bad<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">full</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Walter White is insane</span>
</code></pre></div>
<p>Setter</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">personSchema<span class="token punctuation">.</span><span class="token method function property-access">virtual</span><span class="token punctuation">(</span><span class="token string">'name.full'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> split <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span> <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span> <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token spread operator">...</span>
mad<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">full</span> <span class="token operator">=</span> <span class="token string">'Breaking Bad'</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>mad<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Breaking</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>mad<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Bad</span>
</code></pre></div>
<h4>options</h4>
<p>Schemas 有一些配置选项可以通过在构造的时候或者直接通过<em>set</em>来进行设置</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>可选项有：</p>
<ul>
<li>autoIndex</li>
<li>capped</li>
<li>id</li>
<li>_id</li>
<li>read</li>
<li>safe</li>
<li>shardKey</li>
<li>strict</li>
<li>toJSON</li>
<li>toObject</li>
<li>versionKey</li>
</ul>
<h3>模型</h3>
<p>模型是通过编译而成的构造函数，模型的实例是能够从数据库中保存和检索的文档，数据库中所有的文档保存和检索都通过模型进行处理。</p>
<h4>编译模型</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Tank</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Tank"</span><span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>构造文档</h4>
<p>文档是模型的实例。创建并保存文档到数据库有两种方式</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Tank</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Tank"</span><span class="token punctuation">,</span> yourSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> small <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"small"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
small<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// saved!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"small"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> small</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// saved!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>查询</h4>
<p>文档可以被检索通过使用每一个模型的<em>find,findById,findOne,where</em>静态方法</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"small"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">where</span><span class="token punctuation">(</span><span class="token string">"createdDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">gt</span><span class="token punctuation">(</span>oneYearAgo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>移除</h4>
<p>模型有一个<em>remove</em>静态方法可以移除所有匹配 conditions 的文档</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"large"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// removed!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>更新</h4>
<p>使用每一个模型的<em>update</em>来修改数据库中的文档，但是这个方法不会返回这些文档给你。**</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">MyModel</span><span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">oldEnough</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token maybe-class-name">MyModel</span><span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tobi"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">ferret</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">multi</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> numberAffected<span class="token punctuation">,</span> raw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"The number of updated documents was %d"</span><span class="token punctuation">,</span> numberAffected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"The raw response from Mongo was "</span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><em>如果你想更新单个文档并且希望得到返回值，使用 findOneAndUpdate 方法来代替。</em></p>
<h3>文档</h3>
<h4>检索</h4>
<p>文档的检索通过模型的一些静态方法</p>
<p>例如：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Person</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> yourSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields</span>
<span class="token maybe-class-name">Person</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token string-property property">"name.last"</span><span class="token operator">:</span> <span class="token string">"Ghost"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"name occupation"</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>
      <span class="token string">"%s %s is a %s."</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">occupation</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Space Ghost is a talk show host.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>也可以使用连缀的形式添加更加细致的查询条件</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Person</span><span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">occupation</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">host</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">where</span><span class="token punctuation">(</span><span class="token string">"name.last"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">equals</span><span class="token punctuation">(</span><span class="token string">"Ghost"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">where</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">gt</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">lt</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">where</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">in</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"vaporizing"</span><span class="token punctuation">,</span> <span class="token string">"talking"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token string">"-occupation"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">select</span><span class="token punctuation">(</span><span class="token string">"name occupation"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>更新</h4>
<p>有多种方式来更新文档</p>
<ul>
<li>传统方式</li>
</ul>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> tank</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

  tank<span class="token punctuation">.</span><span class="token property-access">size</span> <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>
  tank<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<ul>
<li>
<p>通过模型进行文档的更新（不会返回文档）</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">$set</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"large"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>通过模型查找更新（返回更新的文档）</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Tank</span><span class="token punctuation">.</span><span class="token method function property-access">findByIdAndUpdate</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">$set</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">"large"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> tank</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
</ul>
<h3>子文档</h3>
<p>子文档是拥有模式的文档，它们通常是父文档中的一个数组元素。子文档拥有正常文档一样的功能，唯一的不同是他们不能单独保存，只有父文档被保存的时候才能被保存。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> childSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> parentSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>childSchema<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Parent</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">,</span> parentSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Matt"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Sarah"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">"Matthew"</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>查询子文档</h4>
<p>每一个文档都有一个*_id<em>属性，文档数组有一个特殊的 id()方法用来通过</em>_id*查找文档。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> doc <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token method function property-access">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>添加子文档</h4>
<p>通过向父文档中对应的数组添加子文档数组元素来添加子文档。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Parent</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// create a comment</span>
parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Liesl"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> subdoc <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>subdoc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { _id: '501d86090d371bab2c0341c5', name: 'Liesl' }</span>
subdoc<span class="token punctuation">.</span><span class="token property-access">isNew</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
parent<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>子文档也可以被创建而不哦那个添加他们到数组中通过使用*create()*方法。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newdoc <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Aaron"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>移除子文档</h4>
<p>每一个子文档有它自己的*remove()*方法</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> doc <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token method function property-access">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"the sub-doc was removed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>在 mongoose V3 以上的版本你不再需要单独声明子文档的 schema 然后在父文档中进行引用，你只需要简单声明一个对象字面量就可以。</p>
<h3>查询</h3>
<p>通过内嵌的 query 语句进行查询</p>
<p>模型上面的查询有两种方式</p>
<ul>
<li>传递 callback,操作将会立即执行并且结果会返回到 callback 中</li>
<li>不传递 callback，将会返回一个 query 实例，这个实例将会暴露一些 QueryBuilder 接口给你进行使用</li>
</ul>
<p>方式一：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token maybe-class-name">Person</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> yourSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields</span>
<span class="token maybe-class-name">Person</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token string-property property">"name.last"</span><span class="token operator">:</span> <span class="token string">"Ghost"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"name occupation"</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>
      <span class="token string">"%s %s is a %s."</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">,</span>
      person<span class="token punctuation">.</span><span class="token property-access">occupation</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Space Ghost is a talk show host.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>方式二：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// find each person with a last name matching 'Ghost'</span>
<span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token maybe-class-name">Person</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"name.last"</span><span class="token operator">:</span> <span class="token string">"Ghost"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// selecting the `name` and `occupation` fields</span>
query<span class="token punctuation">.</span><span class="token method function property-access">select</span><span class="token punctuation">(</span><span class="token string">"name occupation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// execute the query at a later time</span>
query<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>
    <span class="token string">"%s %s is a %s."</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">occupation</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Space Ghost is a talk show host.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>方式二的链式写法</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// find each person with a last name matching 'Ghost'</span>
<span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token maybe-class-name">Person</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"name.last"</span><span class="token operator">:</span> <span class="token string">"Ghost"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// selecting the `name` and `occupation` fields</span>
query<span class="token punctuation">.</span><span class="token method function property-access">select</span><span class="token punctuation">(</span><span class="token string">"name occupation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// execute the query at a later time</span>
query<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>
    <span class="token string">"%s %s is a %s."</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">first</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token property-access">last</span><span class="token punctuation">,</span>
    person<span class="token punctuation">.</span><span class="token property-access">occupation</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Space Ghost is a talk show host.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>验证器</h3>
<p>mongoose 有一些自己的内置验证器：</p>
<ul>
<li>所有的 SchemaTyps 有内置的验证</li>
<li>Number 类型有<em>min</em>和<em>max</em>验证</li>
<li>String 类型有<em>enum</em>和<em>match</em>验证</li>
</ul>
<p>如果内置的验证器不能满足要求，我们自己可以进行定制</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> toySchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Toy</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Toy"</span><span class="token punctuation">,</span> toySchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token maybe-class-name">Toy</span><span class="token punctuation">.</span><span class="token property-access">schema</span><span class="token punctuation">.</span><span class="token method function property-access">path</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">validate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">blue<span class="token alternation keyword">|</span>green<span class="token alternation keyword">|</span>white<span class="token alternation keyword">|</span>red<span class="token alternation keyword">|</span>orange<span class="token alternation keyword">|</span>periwinkle</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Invalid color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> toy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Toy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"grease"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toy<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// err is our ValidationError object</span>
  <span class="token comment">// err.errors.color is a ValidatorError object</span>

  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">errors</span><span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 'Validator "Invalid color" failed for path color with value `grease`'</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">errors</span><span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 'Validator "Invalid color" failed for path color with value `grease`'</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">errors</span><span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints "Invalid color"</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">errors</span><span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints "color"</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">errors</span><span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints "grease"</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints "ValidationError"</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints "Validation failed"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3>中间件</h3>
<p>中间件是一些函数，它被传递用来控制文档的 init,validate,save,remove 方法的执行。中间件是处于文档的层次而不是模型的层次，中间件分为<em>pre</em>和<em>post</em>两种</p>
<h4>Pre</h4>
<ul>
<li>
<p>Serial（串行的）</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">pre</span><span class="token punctuation">(</span><span class="token string">'save'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do stuff</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
</li>
<li>
<p>Parallel（并行的）</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">pre</span><span class="token punctuation">(</span><span class="token string">'save'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">next<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// calling next kicks off the next middleware in parallel</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">doAsync</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>使用异步的情况下关联的方法例如<em>save</em>将不会被立即执行直到<em>done</em>被每一个中间件调用</p>
</li>
</ul>
<h4>Post</h4>
<p>post 中间件会立即执行，在关联的方法和它的<em>pre</em>中间件完成的时候，post 中间件不会对操作进行控制，相当于只是监听这些方法</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">schema<span class="token punctuation">.</span><span class="token method function property-access">post</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"%s has been initialized from the db"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">post</span><span class="token punctuation">(</span><span class="token string">"validate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"%s has been validated (but not saved yet)"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">post</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"%s has been saved"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
schema<span class="token punctuation">.</span><span class="token method function property-access">post</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"%s has been removed"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>中间件在 update 操作直接执行的情况下不会被调用，例如<code>Model.update</code>,<code>.findByIdAndUpdate</code>,<code>.findOneAndUpdate</code>,<code>.findOneAndRemove</code>,<code>.findByIdAndRemove</code>，如果你要利用中间件就必须<code>find()</code>文档然后在文档上调用<code>init</code>,<code>validate</code>,<code>save</code>,<code>remove</code>函数。</p>
<h3>填充</h3>
<p>在 MongoDB 中没有类似于 SQL 中的 joins，如果我们想模拟这种操作就需要用到填充</p>
<h4>定义 schema</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">Schema</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Schema</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> personSchema <span class="token operator">=</span> <span class="token function"><span class="token maybe-class-name">Schema</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stories</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token maybe-class-name">Schema</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Types</span></span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">ObjectId</span></span><span class="token punctuation">,</span> <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">"Story"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> storySchema <span class="token operator">=</span> <span class="token function"><span class="token maybe-class-name">Schema</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">_creator</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span> <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">"Person"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">,</span> <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">"Person"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Story</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Story"</span><span class="token punctuation">,</span> storySchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token maybe-class-name">Person</span> <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token method function property-access">model</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> personSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>保存关联的 refs</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aaron <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Aaron"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
aaron<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> story1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Story</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Once upon a timex."</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_creator</span><span class="token operator">:</span> aaron<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">,</span> <span class="token comment">// assign the _id from the person</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  story1<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// thats it!</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>关联查询</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Story</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Once upon a timex."</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token string">"_creator"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> story</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"The creator is %s"</span><span class="token punctuation">,</span> story<span class="token punctuation">.</span><span class="token property-access">_creator</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// prints "The creator is Aaron"</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>值域选择</h4>
<p>只选择我们想要的属性</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Story</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">timex</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token string">"_creator"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// only return the Persons name</span>
  <span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> story</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"The creator is %s"</span><span class="token punctuation">,</span> story<span class="token punctuation">.</span><span class="token property-access">_creator</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// prints "The creator is Aaron"</span>

    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"The creators age is %s"</span><span class="token punctuation">,</span> story<span class="token punctuation">.</span><span class="token property-access">_creator</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// prints "The creators age is null'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>并联路径的填充</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Story</span>
<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token string">'fans author'</span><span class="token punctuation">)</span> <span class="token comment">// space delimited path names</span>
<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<p>如果<strong>monggoose&#x3C;3.6</strong>需要这样使用</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Story</span>
<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token string">'fans'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h4>填充查询条件</h4>
<p>如果我们要填充我们的 fans 数组基于年龄进行查询，选择他们的名字并且返回最多 5 条数据</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token maybe-class-name">Story</span>
<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">populate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'fans'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">match</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token string">'name -_id'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>连接</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">mongoose<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost/myapp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>这将会连接到默认的<em>27017</em>端口的<em>localhost</em>数据库实例下的<em>myapp</em>数据库，如果你想写入其他端口或者数据库可以像下面这样</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">mongoose<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://username:password@host:port/database?options..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[git ssh配置]]></title>
        <id>https://jiangwenyang.com/posts/git-ssh配置</id>
        <link href="https://jiangwenyang.com/posts/git-ssh配置"/>
        <updated>2016-05-30T18:58:33.000Z</updated>
        <summary type="html"><![CDATA[介绍windows下如何快速配置git-ssh,一般而言 Mac 或 linux基本上也适用]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>windows 下使用 git bash 每次执行<code>git push -u origin master</code>时都需要输入账户密码，这对于追求高效率的程序员来说是不能容忍的</p>
</blockquote>
<h2>解决方案</h2>
<blockquote>
<p>通过配置 SSH 以及在添加远程主机的时候使用 ssh 地址<code>git remote add &#x3C;主机名> &#x3C;网址></code></p>
</blockquote>
<h3>一、检查是否已有 ssh</h3>
<p>打开 git bash 输入<code>ls -al ~/.ssh</code>检查是否已有 ssh 存在
如果存在会显示下列文件的一个或者多个</p>
<blockquote>
<p>id_dsa.pub
id_ecdsa.pub
id_ed25519.pub
id_rsa.pub</p>
</blockquote>
<p>或者在系统盘下的 user/用户名/.ssh 文件夹下进行查看
<a href="https://help.github.com/articles/checking-for-existing-ssh-keys/">参考官方帮助</a></p>
<h3>二、如果不存在，生成 ssh</h3>
<p>打开 git bash 输入<code>ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</code>
例如我的用户名是 jiangwenyang，所以输入：<code>ssh-keygen -t rsa -b 4096 -C "jiangwenyang"</code>
<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">参考官方帮助</a></p>
<h3>三、将 ssh 私钥添加到 ssh-agent</h3>
<ul>
<li>打开 git bash</li>
<li><code>eval "$(ssh-agent -s)"</code>打开 ssh-agent</li>
<li><code>ssh-add ~/.ssh/id_rsa</code>添加 ssh key 到 ssh-agent</li>
</ul>
<p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">参考官方帮助</a></p>
<h3>四、添加 ssh 公钥到 github 账户</h3>
<ul>
<li>复制公钥
打开<code>/user/用户名/.ssh</code>文件夹下面以<code>.pub</code>为后缀的文件，复制其中的内容</li>
<li>添加到 github 设置中
<ul>
<li>网页打开 github，点击** settings **，进入个人设置页面</li>
<li>点击<strong>SSH and GPG keys</strong>在右边的页面点击** New SSH Key **</li>
<li>其中<strong>title</strong>字段为用户自定义字段，对 ssh-key 进行描述方便分辨，<strong>key</strong>字段为我们复制的公钥内容，粘贴即可</li>
</ul>
</li>
</ul>
<p><a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/">参考官方帮助</a></p>
<h3>五、大功告成，重新打开 git bash 进行 push 便不需要输入用户名密码了</h3>
]]></content>
        <author>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </author>
        <contributor>
            <name>Jiang Wenyang</name>
            <email>u19950930@gmail.com</email>
            <uri>https://jiangwenyang.com</uri>
        </contributor>
    </entry>
</feed>