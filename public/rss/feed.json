{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jiang Wenyang's Blog",
    "home_page_url": "https://jiangwenyang.com",
    "feed_url": "https://jiangwenyang.com/json",
    "description": "Jiang Wenyang's Blog",
    "icon": "https://jiangwenyang.com/logo.svg",
    "author": {
        "name": "Jiang Wenyang",
        "url": "https://jiangwenyang.com"
    },
    "items": [
        {
            "id": "https://jiangwenyang.com/posts/一个真实的vue-cli项目迁移到vite",
            "url": "https://jiangwenyang.com/posts/一个真实的vue-cli项目迁移到vite",
            "title": "一个真实的Vue CLI项目迁移到vite",
            "summary": "\n## 是谁？叫什么？来自哪里？要去往那里？\n\n先来回答灵魂拷问。我们原有的项目是一个使用 Vue CLI 生成的 vue2 项目，项目整体上是没有什么大问题的，但是随着模块的不断增多，Vue CLI 基于 Webpack 构建速度越来越慢，开发体验上比较差，为了减少抓狂时间，我们将目光转向了号称很快的 Vite。\n\n废话不多说，先来看原本的项目结构：\n\n```\n├── .browserslistrc\n├── .editorconfig\n├── .env.development // 环境变量，以下几个文件同\n├── .env.development.local\n├── .env.pre\n├── .env.production\n├── .env.si\n├── .env.test\n├── .eslintignore\n├── .eslintrc.js\n├── .gitignore\n├── .npmrc\n├── .nvmrc\n├── .prettierignore\n├── .prettierrc.js\n├── .stylelintignore\n├── .stylelintrc.js\n├── README.md\n├── babel.config.js\n├── build/\n├── config/ 一些项目配置文件，如代理配置等\n├── dist/ 构建产物\n├── doc/ 开发文档\n├── jsconfig.json\n├── mock/\n├── package.json\n├── postcss.config.js\n├── public/\n├── src/ 业务相关\n├── tests/\n├── vue.config.js // Vue CLI配置\n└── yarn.lock\n```\n\n## 好好的为什么要迁移？\n\n迁移的目的主要是构建速度上的差别，除此之外 Vite 也有一些其他的优势。\n\n- 构建速度\n\n  Vite 相比 Vue CLI 最显著的优势应该就是构建速度了，Vite 基于 esbuild 预构建依赖，因此会快很多，开发体验会更好。\n\n  > Vite 的开发环境和生产环境构建目前有所区别，开发环境因为直接使用原生 ESM 不需要打包，而生产环境打包采用了 Rollup\n\n- 隐藏技术细节\n\n  呃，这一点，其实 vite 和 Vue CLI 没有太大区别。。。\n\n- 折腾，尝试新的工具\n\n  毕竟是新的工具，尝试一下，并且 Vue 社区目前也是在推动的。\n\n## 千里之行始于足下\n\n万事开头难，既然迁移的 Flag 已经立了，只能硬着头皮上了。让我们先简单看一遍 Vite 的官方文档，文档延续了 Vue 官方文档简洁清晰的优点，基本上简单看一遍就对 Vite 比较了解了，具体细节不比过分深究。看完文档很容易发现和 Vue CLI 的一些约定上的区别，对于这部分是必须修改代码的，下面开始迁移\n\n### 首先丢掉历史包袱，移除 Vue CLI 轻装上阵\n\n首先，我们先移除所有和 Vue CLI 相关的依赖以及配置\n\n- 在 `package.json` 的依赖中搜索 `vue-cli` 关键词，然后移除相关依赖。\n\n- 将 script 中的启动脚本改为 Vite 对应的启动脚本\n\n  将原本的启动脚本\n\n  ```json\n  {\n    \"scripts\": {\n      \"dev\": \"vue-cli-service serve --open\",\n      \"build\": \"vue-cli-service build --mode development\"\n    }\n  }\n  ```\n\n  改为\n\n  ```json\n  {\n    \"scripts\": {\n      \"dev\": \"vite\",\n      \"build\": \"vite build\",\n      \"serve\": \"vite preview\"\n    }\n  }\n  ```\n\n### 然后剔个牙，做些“小改动”\n\n我们上面说到 Vite 和 Vue CLI 在部分约定上的不同，需要对代码做一些小改动\n\n#### 入口不同\n\nVue CLI 默认入口为`src/main.js`，而 Vite 的默认入口则是 index.html\n\n直接引用官方文档：\n\n> Vite 将 `index.html` 视为源码和模块图的一部分。Vite 解析 `<script type=\"module\" src=\"...\">` ，这个标签指向你的 JavaScript 源码。甚至内联引入 JavaScript 的 `<script type=\"module\">` 和引用 CSS 的 `<link href>` 也能利用 Vite 特有的功能被解析。另外，`index.html` 中的 URL 将被自动转换，因此不再需要 `%PUBLIC_URL%` 占位符了。\n\n因此我们首先需要修改原有的入口\n\n将 `public/index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"renderer\" content=\"webkit\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\n    />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"Keywords\" content=\"\" />\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n    <title><%= webpackConfig.name %></title>\n  </head>\n  <body>\n    <noscript>\n      <strong>本页面需要浏览器支持（启用）JavaScript！！！</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n移动到根目录下`index.html` ，并做修改\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"renderer\" content=\"webkit\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\n    />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"Keywords\" content=\"\" />\n    <link rel=\"icon\" href=\"./favicon.ico\" />\n    <title>XXX</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>本页面需要浏览器支持（启用）JavaScript！！！</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- Vite将自动解析下面的js文件 -->\n    <script type=\"module\" src=\"/src/main.js\"></script>\n  </body>\n</html>\n```\n\n#### 环境变量不同\n\nVue CLI 的环境变量和 Vite 的环境变量加载都是通过 [dotenv](https://github.com/motdotla/dotenv) 来实现的，因此在文件命名约定上是一致的。但具有以下两点不同：\n\n- 暴露方式\n\n  - Vue CLI 中约定只有 `NODE_ENV`、`BASE_URL` 和以`VUE_APP_` 开头的变量被暴露出来。\n\n  - Vite 中则约定可以访问 `MODE` （应用运行的模式 development|production） 、`BASE_URL` 、`PROD` （是否运行在生产环境）、`DEV` （是否运行在开发环境）以及以 `VITE_` 开头的环境变量。\n\n- 访问方式\n\n  - Vue CLI 通过`process.env` 来访问\n\n  - Vite 通过 `import.meta.env` 来访问\n\n由于以上的两点不同，迁移时我们就需要：\n\n- 将原本以 `VUE_APP_` 开头的环境变量统一替换为以 `VITE_` 开头；或者可通过修改配置文件 `vite.config.js` 的 [envPrefix](https://cn.vitejs.dev/config/index.html#envprefix) 进行配置，直接配置为 `VUE_APP_` 则不需要对原有环境变量名称进行修改。(配置文件的创建下面将会提到)\n- 将 `process.env` 统一替换为 `import.meta.env`。\n\n#### 不能忽略自定义导入类型扩展名（如`.vue`）\n\n在 Vue CLI 中，默认我们可以不写`.vue`扩展名进行导入\n\n```js\nimport App from \"./App\";\n```\n\n但是在 Vite 中，**不建议**（实测还是可以配置的）忽略自定义扩展名，因为会影响 IDE 和类型支持。因此需要完整书写\n\n```js\nimport App from \"./App.vue\";\n```\n\n> 非自定义类型的扩展名可以通过配置项 ` resolve.extensions` 来进行配置，默认为 `['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json']`\n\n### 出来吧你，Vite\n\n到目前为止，基本的修改以及完成，我们开始引入 Vite。\n\nVite 的安装比较简单，唯一需要注意的就是对于不同的 Vue 版本，需要用到不同的插件。\n\n安装 Vite\n\n```bash\n$ yarn add -D\n```\n\n安装对应版本的 Vue 插件\n\n> Vite 为 Vue 提供第一优先级支持：\n>\n> - Vue 3 单文件组件支持：[@vitejs/plugin-vue](https://github.com/vitejs/vite/tree/main/packages/plugin-vue)\n> - Vue 3 JSX 支持：[@vitejs/plugin-vue-jsx](https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx)\n> - Vue 2 支持：[underfin/vite-plugin-vue2](https://github.com/underfin/vite-plugin-vue2)\n\n由于我们使用 Vue2，因此安装 `vite-plugin-vue2`\n\n```bash\n$ yarn add -D vite-plugin-vue2\n```\n\n在根目录创建配置文件 `vite.config.js`\n\n```json\nimport { defineConfig } from 'vite'\nconst { createVuePlugin } = require('vite-plugin-vue2')\n\n// https://vitejs.dev/config/\nexport default defineConfig(() => {\n  return {\n    base: './',\n    clearScreen: false,\n    plugins: [createVuePlugin()],\n    build: {\n      target: 'es2015',\n    },\n  }\n})\n```\n\n**完结撒花！！！**\n\n如果你的项目没有其他特殊的需求的话，到目前为止，你基本上应该可以跑起来了。不过，我们的项目就没这么幸运了，旅途才刚刚开始。。。\n\n## 填坑之旅\n\n### 启用 JSX\n\nVite 默认是不启用 JSX 的，如果要开启 JSX 支持还是比较麻烦的，需要：\n\n1. 实例化 Vue2 插件的时候传入`{jsx: true}` 开启 JSX 支持。\n\n   ```js\n   export default defineConfig(() => {\n     return {\n       plugins: [createVuePlugin({ jsx: true })], // 引入Vue2插件并开启JSX支持\n     };\n   });\n   ```\n\n2. 在用到的组件上加上 `jsx` 标识\n\n   ```js\n   <script lang=\"jsx\">\n       export default {\n           render(){\n               return <div>JSX Render</div>\n           }\n       }\n   </script>\n   ```\n\n3. 如果是 js 文件，用到了 `jsx` 语法，则需要将后缀名改完 `.jsx` 。\n\n### alias\n\n在原项目中我们在 `vue.config.js` 中 定义了使用了 Webpack 的 `resolve.alias` 特性：\n\n```js\n{\n\t\"configureWebpack\":{\n\t\tresolve: {\n      alias: {\n        '@': resolve('src'),\n        '@api': resolve('src/api'),\n        '@components': resolve('src/components'),\n        '@containers': resolve('src/containers'),\n        '@services': resolve('src/services'),\n        '@styles': resolve('src/styles'),\n        '@utils': resolve('src/utils'),\n\n        '@@containers': resolve(\n          'node_modules/web-lib/packages/web-lib-containers/lib'\n        ),\n        '@@components': resolve(\n          'node_modules/web-lib/packages/web-lib-components/lib'\n        ),\n        '@@services': resolve(\n          'node_modules/web-lib/packages/web-lib-services/lib'\n        ),\n        '@@utils': resolve('node_modules/web-lib/packages/web-lib-utils/lib'),\n        '@@styles': resolve('node_modules/web-lib/packages/web-lib-styles/lib'),\n      },\n    },\n\t}\n}\n```\n\n查看 Vite 的配置文档，发现内置支持了 alias，虽然是通过 `@rollup/plugin-alias` 来实现的，但是幸运的是配置方式基本是一致的。\n\n因此在`vite.config.js` 中返回的配置对象中添加对应配置 `resolve.alias` , 直接复制原有配置对象即可。\n\n```js\nresolve: {\n      alias: {\n        '@': resolve('src'),\n        '@api': resolve('src/api'),\n        '@components': resolve('src/components'),\n        '@containers': resolve('src/containers'),\n        '@services': resolve('src/services'),\n        '@styles': resolve('src/styles'),\n        '@utils': resolve('src/utils'),\n\n        '@@containers': resolve(\n          'node_modules/web-lib/packages/web-lib-containers/lib'\n        ),\n        '@@components': resolve(\n          'node_modules/web-lib/packages/web-lib-components/lib'\n        ),\n        '@@services': resolve(\n          'node_modules/web-lib/packages/web-lib-services/lib'\n        ),\n        '@@utils': resolve('node_modules/web-lib/packages/web-lib-utils/lib'),\n        '@@styles': resolve('node_modules/web-lib/packages/web-lib-styles/lib'),\n      },\n}\n```\n\n### 客户端代码中不能使用 node 内部模块\n\nVite 中不对模块兼容做处理，因此一些 Node 的内置模块在客户端代码中将无法找到。如果确实需要用到，则需要替换为对应的浏览器兼容实现。\n\n如 `path` 模块可以换成对应的浏览器兼容实现 `path-browserify` 。\n\n原有代码使用 `path.join` 来拼接路径：\n\n```js\nimport path from \"path\";\n\nexport function genPath(...paths) {\n  return path.join(...paths);\n}\n```\n\n在 Vite 中则需要修改为对应浏览器兼容实现 `path-browserify`\n\n首先安装 `path-browserify`\n\n```bash\n$ yarn add path-browserify\n```\n\n然后直接替换引用即可\n\n```js\nimport path from \"path-browserify\";\n\nexport function genPath(...paths) {\n  return path.join(...paths);\n}\n```\n\n### 全局 CSS 变量\n\n在我们原项目中在`vue.config.js` 中配置引入了 [sass-resources-loader](https://github.com/shakacode/sass-resources-loader) 来实现。\n\n```js\nchainWebpack(config) {\n\t// 引入全局的sass资源\n    const oneOfsMap = config.module.rule('scss').oneOfs.store\n    oneOfsMap.forEach(item => {\n      item\n        .use('sass-resources-loader')\n        .loader('sass-resources-loader')\n        .options({\n          resources: [\n            './node_modules/web-lib/packages/web-lib-styles/src/variables/index.scss',\n            './src/styles/variables.scss',\n          ],\n        })\n        .end()\n    })\n}\n```\n\n在 Vite 中我们可以通过 ` css.preprocessorOptions` 进行配置。\n\n```js\ncss: {\n      preprocessorOptions: {\n        scss: {\n          additionalData: `@import './node_modules/web-lib/packages/web-lib-styles/src/variables/index.scss';`,\n        },\n      },\n}\n```\n\n如果你细心的话可能会发现，我们的原代码中引入了两个 CSS 文件。而迁移后的我们只引入了一个 CSS 文件。原因是在 `./src/styles/variables.scss` 中我们使用了下面的语法导出了 js 变量\n\n```scss\n// 导出，供js模块调用\n:export {\n  bg: $bg;\n  text_color: $text_color;\n  header_height: $header_height;\n  sidebar_width: $sidebar_width;\n  header_bg: $header_bg;\n  logo_bg: $logo_bg;\n  menu_bg: $menu_bg;\n  menu_text_color: $menu_text_color;\n  menu_active_text_color: $menu_active_text_color;\n  menu_hover: $menu_hover;\n}\n```\n\n在 Vite 中会出现，如果配置了 `additionalData`，将会报错：\n\n```bash\nError: This file is already being loaded.\n    ╷\n  2 │           @import './src/styles/variables.scss';\n    │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ╵\n    src/styles/variables.scss 2:19  root stylesheet\n```\n\n可参考以下 ISSUE:\n\n- https://github.com/vitejs/vite/issues/3283\n- https://github.com/nuxt/vite/issues/117\n\n目前我们的解决方式就是不引入，然后在用到的地方手动进行引入规避这个问题，暂时没有特别好的解决方案。\n\n### 动态导入 png 等图片资源\n\n在 Vue CLI 项目中，我们往往需要通过运行时变量来动态确定一些静态资源来进行导入\n\n```js\nconst iconSrc = require(`./images/${iconName}.png`);\n```\n\n上面的代码使用 webpack 的 url-loader 或 url-loader，将被自动处理\n\nVite 处理图片资源的动态引入会比较麻烦，有以下几种方式：\n\n1. 使用 `import.meta.globEager` glob 引入\n\n   > 这种方式将会全量的引入匹配的图片\n\n   ```js\n   const images = import.meta.globEager(\"./images/*.png\"); // 将会直接导入所有匹配的图片\n   const iconSrc = iamges[`./images/${iconName}.png`].default;\n\n   if (iamges[`./images/${iconName}.png`]) {\n     // TODO\n   } else {\n     // TODO\n   }\n   ```\n\n2. 使用 `new URL(url, import.meta.url)` 引入\n\n   > 这种方式如果图片不存在在代码层面无法判断\n\n   ```js\n   const iconSrc = new URL(`./images/${iconName}.png`, import.meta.url); // 将返回一个URL实例\n   ```\n\n### svg 雪碧图\n\n在原项目中我们使用了 webpack 的 [svg-sprite-loader](https://github.com/JetBrains/svg-sprite-loader) 插件来实现 svg 雪碧图。\n\n```js\nchainWebpack(config) {\n  // set svg-sprite-loader\n    config.module\n      .rule('svg')\n      .exclude.add(resolve('src/icons'))\n      .end()\n    config.module\n      .rule('icons')\n      .test(/\\.svg$/)\n      .include.add(resolve('src/icons'))\n      .end()\n      .use('svg-sprite-loader')\n      .loader('svg-sprite-loader')\n      .options({\n        symbolId: 'icon-[name]',\n      })\n      .end()\n}\n```\n\n感谢社区，在 Vite 中我们可以使用插件**[ vite-plugin-svg-icons ](https://github.com/anncwb/vite-plugin-svg-icons)** 来进行替换以实现相同的功能。使用方式基本一样，具体使用可以查看相应文档。\n\n> 注意: svg-sprite-loader 需要手动引入 svg 文件，而 vite-plugin-svg-icons 会自动引入。\n\n在 Vite 配置的 `plugins` 选项中引入插件\n\n```js\nimport viteSvgIcons from 'vite-plugin-svg-icons'\n\nexport default defineConfig(({ mode }) => {\n return {\n   viteSvgIcons({\n        iconDirs: [resolve('src/icons/svg')],\n        symbolId: 'icon-[name]',\n    }),\n \t}\n}\n```\n\n在 `main.js` 中引入\n\n```js\nimport \"virtual:svg-icons-register\";\n```\n\n### Glob 导入\n\n在老项目中我们如果使用了 webpack 的 `require.context` 语法，在 Vite 中会报错。对应的，Vite 提供了`import.meta.glob` 和 `import.meta.globEager` 来代替\n\n例如原本的`src/store/index.js` 中动态引入 modules\n\n```js\n// 获取模块文件\nconst getModuleFiles = () => require.context(\"./modules\", true, /\\.js$/);\n// 获取模块对象表\nconst getModules = () => {\n  const storeFiles = getModuleFiles();\n\n  const modules = storeFiles.keys().reduce((modules, modulePath) => {\n    // set './app.js' => 'app'\n    const moduleName = modulePath.replace(/^\\.\\/(.*)\\.\\w+$/, \"$1\");\n    const value = storeFiles(modulePath);\n    modules[moduleName] = value.default;\n    return modules;\n  }, {});\n  return modules;\n};\n\nconst modules = getModules();\n```\n\n在 Vite 中改为\n\n```js\nconst files = import.meta.globEager(\"./modules/*.js\");\n\nconst modules = Object.keys(files).reduce((pre, path) => {\n  pre[path.replace(/(\\.\\/modules\\/|\\.js)/g, \"\")] = files[path].default;\n  return pre;\n}, {});\n```\n\n### 热更新\n\n在原本的`src/store/index.js` 中我们通过以下方式开启了 store 的热更新\n\n```js\n// 启用模块热更新\nif (module.hot) {\n  const modulePaths = getModuleFiles().keys();\n  module.hot.accept([\"./getters\", ...[modulePaths]], () => {\n    // 获取更新后的模块\n    const getters = require(\"./getters\").default;\n    const modules = getModules();\n    // 加载新模块\n    store.hotUpdate({\n      getters,\n      modules,\n    });\n  });\n}\n```\n\n在 Vite 中直接移除即可，不需要额外配置。\n\n### 在 Vite 配置文件中使用环境变量\n\n如果想在 Vite 配置中使用环境变量，是不能使用 `import.meta.env` 来获取的，因为 Vite 是先解析配置文件再解析环境变量的。因此只能通过 [dotenv](https://github.com/motdotla/dotenv) 来手动解析访问。\n\n```js\nexport default defineConfig(({ mode }) => {\n  // 访问通用环境变量\n  const { PORT } = require(\"dotenv\").config({ path: `./.env` }).parsed || {};\n\n  // 访问基于运行环境的环境变量\n  const {\n    VITE_APP_URI_BUSINESS_SERVICE_BASE,\n    VITE_APP_URI_FILE_SERVICE_BASE,\n    VITE_APP_USER_SOCTET_BASE,\n  } = require(\"dotenv\").config({ path: `./.env.${mode}` }).parsed || {};\n  return {\n    server: {\n      port: PORT,\n    },\n  };\n});\n```\n\n## 小甜品，来点工程化优化\n\n### husky+lint-staged 实现提交 lint\n\nhusky 可以让我们定义各种 git-hooks，以实现在 git 生命周期中注入各种钩子来定义我们的工作流，比如做代码校验或者邮件通知等。lint-staged 则让我们可以只对待提交的代码进行处理。结合两者便能实现在期望的 git 生命周期中触发对新提交代码进行一系列操作。最常见的便是在 git 的 commit 之前（`pre-commit`），对代码进行校验和格式化。\n\n#### 安装及使用\n\n1. 安装 `husky`\n\n   ```bash\n   $ yarn add -D husky\n   ```\n\n2. 开启 Git hooks\n\n   ```bash\n   yarn husky install\n   ```\n\n3. 添加安装项目依赖后自动开启 Git hooks\n\n   `package.json`\n\n   ```bash\n   {\n     \"scripts\": {\n       \"prepare\": \"husky install\"\n     }\n   }\n   ```\n\n4. 安装 lint-staged\n\n   ```bash\n   $ yarn add -D lint-staged\n   ```\n\n5. 配置 lint-staged\n\n   `package.json`\n\n   ```json\n   {\n     \"lint-staged\": {\n       \"**/*.{vue,js}\": [\"prettier --write\", \"eslint --fix\", \"git add\"],\n       \"**/*.{html,vue,css,scss}\": [\n         \"prettier --write\",\n         \"stylelint --allow-empty-input --fix\",\n         \"git add\"\n       ],\n       \"**/*.{md,json}\": [\"prettier --write\", \"git add\"]\n     }\n   }\n   ```\n\n6. 配置 hook 在提交时触发 lint-staged\n\n   ```bash\n   $ npx husky add .husky/pre-commit \"npx lint-staged\"\n   ```\n\n7. 将 hook 添加到 git 中\n\n   ```bash\n   $ git add .husky/pre-commit\n   ```\n\n#### git 支持的钩子及简单介绍\n\n| 钩子类型           | 钩子名称           | 触发时机                                                                                           | 钩子参数                  | 可中止 |\n| ",
            "date_modified": "2021-09-22T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/TypeScript简明指北",
            "url": "https://jiangwenyang.com/posts/TypeScript简明指北",
            "title": "TypeScript Learning",
            "date_modified": "2019-10-23T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/CSS中的空白符和换行处理",
            "url": "https://jiangwenyang.com/posts/CSS中的空白符和换行处理",
            "title": "CSS中的空白符和换行处理",
            "summary": "\n## CSS 中的空白符和换行处理\n\nCSS 中主要有三个属性用来处理空白符和换行：`white-space` `word-break` `word-wrap` ，长得有点相似，在中文环境下用到的机会不太多，但是每次用到都傻傻分不清楚，下面整理下这几个属性的区别。\n\n### white-space\n\n`white-space` 看名字就知道主要是用来处理空白符的，但是也涉及到换行的问题。\n\n`white-space` 的有下列的值，对应其中的空白符和换行符处理情况：\n\n| 属性              | 空白符                 | 换行符             | 超出是否自动换行 |\n| ",
            "date_modified": "2018-09-11T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/前端自动化测试",
            "url": "https://jiangwenyang.com/posts/前端自动化测试",
            "title": "前端自动化测试",
            "date_modified": "2018-06-19T10:20:26.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/Stroybook",
            "url": "https://jiangwenyang.com/posts/Stroybook",
            "title": "Stroybook",
            "summary": "\n# Stroybook\n\n### 什么是 Storybook?\n\nStroybook 是一个可视化的 UI 开发环境，通过 Stroybook 你能快速的渲染展示 UI 组件，将 UI 组件与项目隔离，并且通过提供的丰富的插件来提升开发体验。\n\n### 使用 Strorybook\n\nStroybook 不仅仅可以应用于 React 项目，同时也支持 Vue 和 Angular，由于目前项目使用 React，并且 Storybook 对 React 的支持度更好，因此在此只介绍 Stroybook for React。\n\n#### 1. 安装\n\n安装配置 Storybook 官方提供了两种方式，一种是使用提供的 cli 工具进行快速生成，一种是手动安装配置。推荐自己手动配置安装以熟悉 Storybook。\n\n##### 1.1 快速生成\n\nStroybook 官方提供了快速生成 Stroybook 项目骨架的命令行工具，这个工具可以在已有项目下使用。\n在项目根目录下执行一下命令：\n\n```bash\n$ npm i -g @storybook/cli\n$ getstorybook\n```\n\n上面的命令将会为你快速生成对应你的项目的 storybook。将会安装对应的依赖，在根目录下创建`.storybook`配置目录并生成对应的配置文件，创建`stories`目录并创建默认的`stories`的 demo\n\n##### 1.2 自定义配置\n\n如果不想全局安装命令行工具，并且希望自定义 Stroybook，推荐自定义安装配置 Stroybook。\n\n1. 安装`@storybook/react`\n\n```bash\n$ yarn add -D @storybook/react\n```\n\n2. 安装 react，react-dom，babel-core\n\n```bash\nyarn add react react-dom\nyarn add -D babel-core\n```\n\n> Storybook 官方没有给出兼容性列表，但实测无法使用 React 0.14\n\n3. 添加 NPM script\n   编辑`package.json`，添加启动 Storybook 的 script 字段\n\n```json\n{\n  \"scripts\": {\n    \"storybook\": \"start-storybook -p 9001 -c .storybook\"\n  }\n}\n```\n\n> `-c` 参数后跟配置文件所处目录，不使用`-c`时将默认使用`.storybook`目录下的配置文件`config.js`\n\n#### 2. 配置\n\n> 如果使用快速生成则下面这些配置文件已经帮你生成好了无需再自己配置。\n\n在根目录下创建`.storybook`文件夹，然后在该目录下创建`config.js`文件。\n最简单的配置：\n\n```javascript\nimport { configure } from '@storybook/react';\n\nfunction loadStories() {\n  require('../stories/index.js');\n  // You can require as many stories as you need.\n}\n\nconfigure(loadStories, module);\n```\n\n上面的配置文件将会使用`stories/index.js`中的 stories，如果你有多个 stories，每次写 stories 的时候需要对应的进行 require，比较繁琐。如果使用 Webpack，可以使用 Webpack 的[require.context](https://webpack.js.org/guides/dependency-management/)语法：\n\n```javascript\nimport { configure } from '@storybook/react';\n\nfunction loadStories() {\n  const storiesContext = require.context(\"../src\", true, /\\.stories\\.tsx$/);\n  storiesContext.keys().forEach(storiesContext);\n  // 将会加载src所有子目录下的以.stories.tsx结尾的模块\n  // You can require as many stories as you need.\n}\n\nconfigure(loadStories, module);\n```\n\n#### 3. 写 stories\n\n在组件目录下新建对应 stories 文件，例如在 Button 组件目录下新建`stories/Button.stories.tsx`\n\n```javascript\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport Button from '../ui.desktop.tsx';\n\nstoriesOf('Button', module)\n  .add('with text', () => (\n    <Button onClick={action('clicked')}>Hello Button</Button>\n  ))\n  .add('with some emoji', () => (\n    <Button onClick={action('clicked')}>😀 😎 👍 💯</Button>\n  ));\n```\n\n然后执行`npm run storybook`或者`yarn storybook`打开[localhost:9001](localhost:9001)将看到类似下面这样的界面\n![](http://ow67vzejn.bkt.clouddn.com/18-1-31/1015387.jpg)\n\n#### 4. 使用 addon\n\nStorybook 通过插件的方式使用额外的功能，主要有两种插件：\n**Decorators 类装饰器插件**\nDecorators 插件又分为两种:\n\n1. Wrapper Components\n   就是普通的 react 容器组件，简单的将你需要 story 的组件包裹在其中。\n\n```javascript\nconst styles = {\n  textAlign: 'center',\n};\nconst Center = ({ children }) => (\n  <div style={styles}>\n    { children }\n  </div>\n);\n```\n\n2. Storybook Decorators\n   扩展一个函数作为 storybook decorator。\n\n```javascript\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\nimport Button from './button';\n\nconst styles = {\n  textAlign: 'center',\n};\nconst CenterDecorator = (storyFn) => (\n  <div style={styles}>\n    { storyFn() }\n  </div>\n);\n\nstoriesOf('Button', module)\n  .addDecorator(CenterDecorator)\n  .add('with text', () => (\n    <Button onClick={action('clicked')}>Hello Button</Button>\n  ))\n  .add('with some emojies', () => (\n    <Button onClick={action('clicked')}>😀 😎 👍 💯</Button>\n  ));\n\n```\n\n> 使用`.addDecorator(Decorator)`语法代码更加简洁,如果要使用全局的 Decorator 可以在`config.js`中配置全局的`Decorator`，将会应用到所有的 stories\n\n例如需要居中显示所有的 stories：\n\n```javascript\nimport * as React from 'react'\nimport { configure,addDecorator,setAddon } from '@storybook/react';\naddDecorator(stories=>(\n\t\t<div style={{textAlign: 'center'}}>\n\t\t    {stories()}\n\t\t</div>\n\t)\n)\n```\n\n**Native Addons 原生插件**\n原生插件能在包裹 stories 之前提供基于 Storybook 平台的额外特性，例如 storybook-actions 插件。\n\n使用这两种插件前，我们都需要先在`.storybook`目录下新建`addons.js`来注册对应的插件\n\n```typescript\nimport \"@storybook/addon-actions/register\";\nimport \"@storybook/addon-links/register\";\nimport \"@storybook/addon-notes/register\";\n```\n\n插件的具体使用配置需要查看插件自己的文档。\n\n#### 5. 自定义 Webpack 配置\n\n当使用 storybook 时，Storybook 将会使用自己默认的 webpack 配置,使用的是 create-react-app 的 webpack 配置，一般而言适用于绝大多数项目。如果想自定义 webpack 有下面几种方式：\n**Extend Mode (扩展模式)**\n在`.storybook`目录下新建文件`webpack.config.js`，导出一个**object**\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n        include: path.resolve(__dirname, '../')\n      }\n    ]\n  }\n}\n```\n\n扩展模式下可以更改除：\n\n- entry\n- output\n- js loader with babel\n\n这几项外所有的 webpack 配置项，Storybook 将会将你的自定义配置项作为默认配置的扩展来启动 webpack。\n\n**Full Control Mode (完全控制模式)**\n通过导出一个函数，函数接受两个参数 storybookBaseConfig 和 configType，一个是 Storybook 的基础配置对象，一个是当前的环境（'DEVELOPMENT' or 'PRODUCTION'），然后通过修改 storybookBaseConfig 后返回自定义的配置对象达到完全控制的目的。\n官方的 DMEO：\n\n```javascript\nconst path = require('path');\n\n// Export a function. Accept the base config as the only param.\nmodule.exports = (storybookBaseConfig, configType) => {\n  // configType has a value of 'DEVELOPMENT' or 'PRODUCTION'\n  // You can change the configuration based on that.\n  // 'PRODUCTION' is used when building the static version of storybook.\n\n  // Make whatever fine-grained changes you need\n  storybookBaseConfig.module.rules.push({\n    test: /\\.scss$/,\n    loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n    include: path.resolve(__dirname, '../')\n  });\n\n  // Return the altered config\n  return storybookBaseConfig;\n};\n```\n\n尽量不要去更改下面这几项：\n\n- entry\n- output\n- first loader in the module.loaders (Babel loader for JS)\n- all existing plugins\n\n**Full control mode + default （完全控制+默认配置 模式）**\n和完全配置模式几乎一样，唯一的区别是导出的函数多了一个参数 defaultConfig，当导出的函数有三个参数时将会使用这种模式。\n\n```javascript\nconst path = require('path');\n\nmodule.exports = (baseConfig, env, defaultConfig) => {\n  // Extend defaultConfig as you need.\n\n  // For example, add typescript loader:\n  defaultConfig.module.rules.push({\n    test: /\\.(ts|tsx)$/,\n    include: path.resolve(__dirname, '../src'),\n    loader: require.resolve('ts-loader')\n  });\n  defaultConfig.resolve.extensions.push('.ts', '.tsx');\n\n  return defaultConfig;\n};\n```\n\n> 建议使用扩展模式，配置比较简单。如果需要根据不同的环境进行不同的编译配置，使用全控制模式配置。\n> Storybook 的基础配置中只包含了 babel-loader 和 md 解析用的 loader，默认配置中配置了例如 css、json、字体文件、媒体文件相关的 loader，可以在 node_modules\\@storybook\\react\\src\\server\\config 下看到对应的 webpack 配置文件。\n\n#### 6. 注入 script 或 css\n\n如果你的 UI 库依赖全局的 script 或者 css，可以通过 Storybook 提供的注入的方式。\n\n1. 组件预览 iframe 注入\n   在`./stroybook`目录下新建`preview-head.html`,里面的 srcipt 或 css 标签将注入到预览区域的 iframe 中，在 stries 加载前被注入。\n   例如希望每个 UI 组件使用 reset.css\n   在`preview-head.html`中添加\n\n```javascript\n<style>\n*{\n\tmargin: 0;\n\tpadding: 0;\n}\n</style>\n```\n\n2. Stroybook 平台注入\n   在`./stroybook`目录下新建`manager-head.html`,里面的 script 或 css 标签将注入到 Stroybook 平台下，将在 Stroybook React UI 加载前被注入。\n\n### 配置参考\n\n```javascript\nimport * as React from 'react'\nimport { configure,addDecorator,setAddon } from '@storybook/react';\n\n/* 导入storybook插件 */\nimport { setOptions } from '@storybook/addon-options';\nimport JSXAddon from 'storybook-addon-jsx';\nimport { withKnobs } from '@storybook/addon-knobs/react';\nimport { withDocs } from 'storybook-readme';\n\n/* 通用storybook底部md */\nimport * as Doc_Footer from './Doc_Footer.md';\n\n/* 设置Storybook UI */\nsetOptions({\n  name: 'AnyShare',\n  url: 'https://anyshare.eisoo.com',\n  goFullScreen: false,\n  showLeftPanel: true,\n  showDownPanel: true,\n  showSearchBox: false,\n  downPanelInRight: true,\n});\n\n/* 设置使用JSXAddon，在侧边栏显示渲染区域组件对应的JSX */\nsetAddon(JSXAddon);\n\nwithDocs.addFooterDocs(Doc_Footer); // 当使用withDocs时，使用通用底部md\n\n/* 全局story装饰器 */\naddDecorator(withKnobs) // 使用addon-knobs装饰器，允许自定义组件参数，具体参数需要在story中定义\n\n\n/* 加载story */\nfunction loadStories() {\n  const storiesContext = require.context(\"../src\", true, /\\.stories\\.tsx$/);\n  storiesContext.keys().forEach(storiesContext);\n}\nconfigure(loadStories, module);\n```\n\nShareWebUI/.sotrybook/addon.js ",
            "date_modified": "2018-03-28T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/git-hook",
            "url": "https://jiangwenyang.com/posts/git-hook",
            "title": "Git-hook",
            "summary": "\n## Git-hook\n\nGit-hook（git 钩子）是 Git 提供的当特定动作如提交、推送等 Git 行为发生时执行的自定义脚本。主要分为客户端脚本和服务器端脚本。\n\n### Git-hook 的安装\n\n其实当初始化一个 Git 项目的时候，hooks 就已经被安装到项目中，只是默认未启用。当执行`git init`的时候，Git 会初始化示例脚本到`.git/hooks`目录中。\n\n如果想启用这些 hooks 非常简单，只需要去掉`.sample`后缀即可启用。示例代码是使用 shell 编写的,但是 git 并没没有显示编写 hooks 使用的语言,任何可执行脚本都可以使用。\n\n> `.git`目录无法加入到版本控制中，因为每次 clone 一个新的仓库的时候都会新生成`.git`目录。\n>\n> 由于这个特性，因此只能将 hooks 存储到其他目录，通过软链接或者手动拷贝的方式拷贝到`.git/hooks`目录下，但是这样的问题是当更新或新增 hooks 脚本的时候需要重新建立与`.git/hooks`的关系。\n\n### 客户端钩子\n\n客户端钩子主要有提交工作流钩子、电子邮件工作流钩子和其它钩子。\n\n| 钩子类型           | 钩子名称           | 触发时机                                                                                           | 钩子参数                  | 可中止 |\n| ",
            "date_modified": "2018-03-12T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/Enzyme官方API一览",
            "url": "https://jiangwenyang.com/posts/Enzyme官方API一览",
            "title": "Enzyme官方API一览",
            "date_modified": "2017-12-27T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/Chai-expect API一览",
            "url": "https://jiangwenyang.com/posts/Chai-expect API一览",
            "title": "断言库Chai-expect-API一览",
            "date_modified": "2017-12-20T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/React事件绑定",
            "url": "https://jiangwenyang.com/posts/React事件绑定",
            "title": "React事件绑定",
            "date_modified": "2017-12-20T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/React高价组件（HOC）",
            "url": "https://jiangwenyang.com/posts/React高价组件（HOC）",
            "title": "React高价组件（HOC）",
            "date_modified": "2017-12-20T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/karma-karma-webpack前端单元测试",
            "url": "https://jiangwenyang.com/posts/karma-karma-webpack前端单元测试",
            "title": "karma+karma-webpack前端单元测试",
            "date_modified": "2017-12-20T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/Mongoose官方API一览",
            "url": "https://jiangwenyang.com/posts/Mongoose官方API一览",
            "title": "Mongoose官方API一览",
            "summary": "\n## 简单起步\n\n### 一、安装\n\n使用 npm 安装 mongoose，在这之前应该安装配置好 mongoDB，具体安装方法可以参考 MongoDB 官方安装指导。\n\n```shell\nnpm install mongoose\n```\n\n### 二、连接数据库\n\n预连接（mongoose 监听数据库端口，尝试进行连接）到默认的*localhost*的*test*数据库。\n\n```javascript\nvar mongoose = require(\"mongoose\");\nmongoose.connect(\"mongodb://localhost/test\"); //mongoDB的数据库连接都是以mongodb://打头，后面跟数据库路径\n```\n\n### 三、判断是否成功连接数据库\n\n前面已经进行数据库的预连接，在数据库开启成功，连接路径没有问题的情况下一般就能正常连接了。\n\n```javascript\nvar db = mongoose.connection;\ndb.on(error, console.error.bind(console, \"connection error:\"));\ndb.once(\"open\", function (callback) {\n  // 连接成功，后续数据库操作都在回调中进行\n});\n```\n\n### 四、定义模式\n\n模式是 mongoose 的核心，相当于 SQL 的数据表结构，在这里定义文档的键以及对应的值的类型，以及定义文档的实例方法和模型的静态方法。\n\n```javascript\nvar Schema = mongoose.Schema;\nvar UserSchema = new Schema({\n  name: String,\n  age: Number,\n});\n```\n\n值对应的类型是 SchemaType，可用的有：\n\n- String\n- Number\n- Date\n- Buffer\n- Boolean\n- Mixed\n- ObjectId\n- Array\n\n### 五、导出模型\n\n真正能对数据库进行操作的是模型和文档，模型是我们构建文档的类，文档是模型的实例，文档的颗粒度比文档更小。\n\n```javascript\nvar Model = mongoose.model;\nvar user = new Model(\"user\", UserSchema);\n```\n\n### 六、生成文档\n\n文档相当于 SQL 中的一行，是真正存储在数据库中的数据。\n\n```javascript\nvar tom = new user({\n  name: \"tom\",\n  age: 20,\n});\n```\n\n### 七、将文档保存到数据库\n\n在上一步我们仍然没有在数据库中保存任何数据，只是生成了文档，但是并没有存入数据库，我们可以使用在文档上*save（）*方法将生成的文档存入数据库。\n\n```javascript\ntom.save(function (err, tom) {\n  if (err) return console.error(err);\n  //进行其他操作\n});\n```\n\n### 八、查询数据库\n\n查询数据库文档，通过在*model*上使用*find*方法。\n\n```javascript\nuser.find({ name: \"tom\" }, function (err, doc) {\n  console.log(doc);\n});\n```\n\n_如果不传入查询条件将会查询所有文档_\n\n",
            "date_modified": "2017-04-16T11:30:16.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/git-ssh配置",
            "url": "https://jiangwenyang.com/posts/git-ssh配置",
            "title": "windows下git ssh配置",
            "date_modified": "2016-05-30T18:58:33.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        },
        {
            "id": "https://jiangwenyang.com/posts/MongoDB入门",
            "url": "https://jiangwenyang.com/posts/MongoDB入门",
            "title": "MongoDB入门",
            "date_modified": "2016-05-13T00:00:00.000Z",
            "author": {
                "name": "Jiang Wenyang",
                "url": "https://jiangwenyang.com"
            }
        }
    ]
}